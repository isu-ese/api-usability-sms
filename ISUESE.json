[
  {"id":"wijayarathnaWhyJohnnyCan2019","type":"article-journal","title":"Why Johnny can’t develop a secure application? A usability analysis of Java Secure Socket Extension API","container-title":"Computers & Security","page":"54-73","volume":"80","source":"ScienceDirect","abstract":"Lack of usability of security Application Programming Interfaces (APIs) is one of the main reasons for mistakes that programmers make that result in security vulnerabilities in software applications they develop. Especially, APIs that provide Transport Layer Security (TLS) related functionalities are sometimes too complex for programmers to learn and use. Therefore, applications are often diagnosed with vulnerable TLS implementations due to mistakes made by programmers. In this work, we evaluated the usability of Java Secure Socket Extension (JSSE) API to identify usability issues in it that persuade programmers to make mistakes while developing applications that would result in security vulnerabilities. We conducted a study with 11 programmers where each of them spent around 2 hours and attempted to develop a secure programming solution using JSSE API. From data we collected, we identified 59 usability issues that exist in JSSE API. Then we divided those usability issues into 15 cognitive dimensions and analyzed how those issues affected the experience of participant programmers. Results of our study provided useful insights about how TLS APIs and similar security APIs should be designed, developed and improved to provide a better experience for programmers who use them.","URL":"http://www.sciencedirect.com/science/article/pii/S0167404818304887","DOI":"10.1016/j.cose.2018.09.007","ISSN":"0167-4048","title-short":"Why Johnny can’t develop a secure application?","author":[{"family":"Wijayarathna","given":"Chamila"},{"family":"Arachchilage","given":"Nalin Asanka Gamagedara"}],"issued":{"date-parts":[[2019,1,1]]},"accessed":{"date-parts":[[2019,5,23]]},"container-title-short":"Computers & Security"},
  {"id":"headWhenNotComment2018","type":"paper-conference","title":"When Not to Comment: Questions and Tradeoffs with API Documentation for C++ Projects","container-title":"Proceedings of the 40th International Conference on Software Engineering","collection-title":"ICSE '18","publisher":"ACM","page":"643–653","source":"ACM Digital Library","abstract":"Without usable and accurate documentation of how to use an API, developers can find themselves deterred from reusing relevant code. In C++, one place developers can find documentation is in a header file. When information is missing, they may look at the corresponding implementation code. To understand what's missing from C++ API documentation and the factors influencing whether it will be fixed, we conducted a mixed-methods study involving two experience sampling surveys with hundreds of developers at the moment they visited implementation code, interviews with 18 of those developers, and interviews with 8 API maintainers. In many cases, updating documentation may provide only limited value for developers, while requiring effort maintainers don't want to invest. We identify a set of questions maintainers and tool developers should consider when improving API-level documentation.","URL":"http://doi.acm.org/10.1145/3180155.3180176","DOI":"10.1145/3180155.3180176","ISBN":"978-1-4503-5638-1","title-short":"When Not to Comment","author":[{"family":"Head","given":"Andrew"},{"family":"Sadowski","given":"Caitlin"},{"family":"Murphy-Hill","given":"Emerson"},{"family":"Knight","given":"Andrea"}],"issued":{"date-parts":[[2018]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Gothenburg, Sweden"},
  {"id":"clarkeUsingCognitiveDimensions2003","type":"paper-conference","title":"Using the cognitive dimensions framework to measure the usability of a class library","container-title":"PPIG","source":"Semantic Scholar","abstract":"Steven Clarke and Curtis Becker Microsoft Corporation 41/2755 1 Microsoft Way Redmond WA 98052 stevencl@microsoft.com a-curtb@microsft.com Abstract In this paper we describe our attempts at using the Cognitive Dimensions framework to evaluate the usability of an object oriented (OO) application programming interface (API). The Cognitive Dimensions framework was originally designed as a tool to evaluate and describe the usability of a programming language but to our knowledge, no reports of it being used to evaluate an API are publicly available. Since many popular OO languages come with an existing set of APIs in the form of OO class libraries, it is important to ensure that the APIs developers use are usable, just as it is to ensure that a programming language is usable also. Thus, in order to measure the usability of an API, we have adapted the Cognitive Dimensions framework so that it better measures those aspects of an API that we feel have an impact on its usability. This paper describes these modifications and the reasons we chose to make them. In addition, using the framework in an industrial setting has presented some interesting challenges, and so we describe those challenges here and our attempts to address them.","author":[{"family":"Clarke","given":"Steven"},{"family":"Becker","given":"Curtis"}],"issued":{"date-parts":[[2003]]}},
  {"id":"duala-ekokoUsingStructureBasedRecommendations2011","type":"paper-conference","title":"Using Structure-Based Recommendations to Facilitate Discoverability in APIs","container-title":"ECOOP 2011 – Object-Oriented Programming","collection-title":"Lecture Notes in Computer Science","publisher":"Springer Berlin Heidelberg","page":"79-104","source":"Springer Link","abstract":"Empirical evidence indicates that developers face significant hurdles when the API elements necessary to implement a task are not accessible from the types they are working with. We propose an approach that leverages the structural relationships between API elements to make API methods or types not accessible from a given API type more discoverable. We implemented our approach as an extension to the content assist feature of the Eclipse IDE, in a tool called API Explorer. API Explorer facilitates discoverability in APIs by recommending methods or types, which although not directly reachable from the type a developer is currently working with, may be relevant to solving a programming task. In a case study evaluation, participants experienced little difficulty selecting relevant API elements from the recommendations made by API Explorer, and found the assistance provided by API Explorer helpful in surmounting discoverability hurdles in multiple tasks and various contexts. The results provide evidence that relevant API elements not accessible from the type a developer is working with could be efficiently located through guidance based on structural relationships.","ISBN":"978-3-642-22655-7","language":"en","author":[{"family":"Duala-Ekoko","given":"Ekwa"},{"family":"Robillard","given":"Martin P."}],"editor":[{"family":"Mezini","given":"Mira"}],"issued":{"date-parts":[[2011]]}},
  {"id":"gerkenUsingConceptMaps2010","type":"paper-conference","title":"Using Concept Maps to Evaluate the Usability of APIs","container-title":"CHI '10 Extended Abstracts on Human Factors in Computing Systems","collection-title":"CHI EA '10","publisher":"ACM","page":"3937–3942","source":"ACM Digital Library","abstract":"Application programming interfaces (APIs) are the interfaces to existing code structures, such as widgets, frameworks, or toolkits. Therefore, they very much do have an impact on the quality of the resulting system. So ensuring that developers can make the most out of them is an important challenge. However standard usability evaluation methods as known from HCI have limitations in grasping the interaction between developer and API -- the GUI, which makes this interaction obvious, is missing. In this paper we present a longitudinal approach using concept maps and a question diary to make this interaction visible and study the usability of an API over time.","URL":"http://doi.acm.org/10.1145/1753846.1754082","DOI":"10.1145/1753846.1754082","ISBN":"978-1-60558-930-5","author":[{"family":"Gerken","given":"Jens"},{"family":"Jetter","given":"Hans-Christian"},{"family":"Reiterer","given":"Harald"}],"issued":{"date-parts":[[2010]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Atlanta, Georgia, USA"},
  {"id":"zibranUsefulUsableFactors2011","type":"paper-conference","title":"Useful, But Usable? Factors Affecting the Usability of APIs","container-title":"2011 18th Working Conference on Reverse Engineering","publisher":"IEEE","page":"151-155","source":"DOI.org (Crossref)","event":"2011 18th Working Conference on Reverse Engineering","abstract":"Software development today has been largely dependent on the use of API libraries, frameworks, and reusable components. However, the API usability issues often increase the development cost (e.g., time, effort) and lower code quality. In this regard, we study 1,513 bug-posts across ﬁve different bug repositories, using both qualitative and quantitative analysis. We identify the API usability issues that are reﬂected in the bugposts from the API users, and distinguish relative signiﬁcance of the usability factors. Moreover, from the lessons learned by manual investigation of the bug-posts, we provide further insight into the most frequent API usability issues.","URL":"http://ieeexplore.ieee.org/document/6079520/","DOI":"10.1109/WCRE.2011.26","ISBN":"978-1-4577-1948-6","title-short":"Useful, But Usable?","language":"en","author":[{"family":"Zibran","given":"Minhaz F."},{"family":"Eishita","given":"Farjana Z."},{"family":"Roy","given":"Chanchal K."}],"issued":{"date-parts":[[2011,10]]},"accessed":{"date-parts":[[2019,5,16]]},"publisher-place":"Limerick"},
  {"id":"burnsUsableResultsField2012","type":"paper-conference","title":"Usable results from the field of API usability: A systematic mapping and further analysis","container-title":"2012 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)","page":"179-182","source":"IEEE Xplore","event":"2012 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)","abstract":"Modern software development often involves the use of complex, reusable components called Application Programming Interfaces (APIs). Developers use APIs to complete tasks they could not otherwise accomplish in a reasonable time. These components are now vital to mainstream software development. But as APIs have become more important, understanding how to make them more usable is becoming a significant research question. To assess the current state of research in the field, we conducted a systematic mapping. A total of 28 papers were reviewed and categorized based on their research type and on the evaluation method employed by its authors. We extended the analysis of a subset of the papers we reviewed beyond the usual limits of a systematic map in order to more closely examine details of their evaluations - such as their structure and validity - and to summarize their recommendations. Based on these results, common problems in the field are discussed and future research directions are suggested.","DOI":"10.1109/VLHCC.2012.6344511","title-short":"Usable results from the field of API usability","author":[{"family":"Burns","given":"C."},{"family":"Ferreira","given":"J."},{"family":"Hellmann","given":"T. D."},{"family":"Maurer","given":"F."}],"issued":{"date-parts":[[2012,9]]}},
  {"id":"myersUsabilityProgrammingLanguages2016","type":"paper-conference","title":"Usability of Programming Languages: Special Interest Group (SIG) Meeting at CHI 2016","container-title":"Proceedings of the 2016 CHI Conference Extended Abstracts on Human Factors in Computing Systems","collection-title":"CHI EA '16","publisher":"ACM","page":"1104–1107","source":"ACM Digital Library","abstract":"Programming languages form the interface between programmers (the users) and the computation that they desire the computer to execute. Although studies exist for some aspects of programming language design (such as conditionals), other aspects have received little or no human factors evaluations. Designers thus have little they can rely on if they want to make new languages highly usable, and users cannot easily chose a language based on usability criteria. This SIG will bring together researchers and practitioners interested in increasing the depth and breadth of studies on the usability of programming languages, and ultimately in improving the usability of future languages.","URL":"http://doi.acm.org/10.1145/2851581.2886434","DOI":"10.1145/2851581.2886434","ISBN":"978-1-4503-4082-3","title-short":"Usability of Programming Languages","author":[{"family":"Myers","given":"Brad A."},{"family":"Stefik","given":"Andreas"},{"family":"Hanenberg","given":"Stefan"},{"family":"Kaijanaho","given":"Antti-Juhani"},{"family":"Burnett","given":"Margaret"},{"family":"Turbak","given":"Franklyn"},{"family":"Wadler","given":"Philip"}],"issued":{"date-parts":[[2016]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"San Jose, California, USA"},
  {"id":"stylosUsabilityImplicationsRequiring2007","type":"paper-conference","title":"Usability Implications of Requiring Parameters in Objects' Constructors","container-title":"29th International Conference on Software Engineering (ICSE'07)","page":"529-539","source":"IEEE Xplore","event":"29th International Conference on Software Engineering (ICSE'07)","abstract":"The usability of APIs is increasingly important to programmer productivity. Based on experience with usability studies of specific APIs, techniques were explored for studying the usability of design choices common to many APIs. A comparative study was performed to assess how professional programmers use APIs with required parameters in objects' constructors as opposed to parameterless \"default\" constructors. It was hypothesized that required parameters would create more usable and self- documenting APIs by guiding programmers toward the correct use of objects and preventing errors. However, in the study, it was found that, contrary to expectations, programmers strongly preferred and were more effective with APIs that did not require constructor parameters. Participants' behavior was analyzed using the cognitive dimensions framework, and revealing that required constructor parameters interfere with common learning strategies, causing undesirable premature commitment.","DOI":"10.1109/ICSE.2007.92","author":[{"family":"Stylos","given":"J."},{"family":"Clarke","given":"S."}],"issued":{"date-parts":[[2007,5]]}},
  {"id":"schellerUsabilityEvaluationConfigurationBased2013","type":"paper-conference","title":"Usability Evaluation of Configuration-Based API Design Concepts","container-title":"Human Factors in Computing and Informatics","collection-title":"Lecture Notes in Computer Science","publisher":"Springer Berlin Heidelberg","page":"54-73","source":"Springer Link","abstract":"Usability is an important quality attribute for designing APIs, but usability-related decision factors are often unknown. This is also the case when looking at APIs for configuration tasks, like for dependency injection or object-relational mapping. In these areas three different API design concepts can be found, which are annotations, fluent interfaces, and XML. There exists no research concerning usability-related characteristics and differences between these concepts.In this paper, we present a usability study that identifies such characteristics and differences between the three concepts, by comparing three different variants of an API for dependency injection. From the study results we evaluate advantages and disadvantages in different use cases, and show how to build more usable configuration-based APIs.","ISBN":"978-3-642-39062-3","language":"en","author":[{"family":"Scheller","given":"Thomas"},{"family":"Kühn","given":"Eva"}],"editor":[{"family":"Holzinger","given":"Andreas"},{"family":"Ziefle","given":"Martina"},{"family":"Hitz","given":"Martin"},{"family":"Debevc","given":"Matjaž"}],"issued":{"date-parts":[[2013]]}},
  {"id":"robillardWhatMakesAPIs2009","type":"article-journal","title":"What Makes APIs Hard to Learn? Answers from Developers","container-title":"IEEE Software","page":"27-34","volume":"26","issue":"6","source":"IEEE Xplore","abstract":"The paper discusses the application program interface (API). Most software projects reuse components exposed through APIs. In fact, current-day software development technologies are becoming inseparable from the large APIs they provide. An API is the interface to implemented functionality that developers can access to perform various tasks. APIs support code reuse, provide high-level abstractions that facilitate programming tasks, and help unify the programming experience. A study of obstacles that professional Microsoft developers faced when learning to use APIs uncovered challenges and resulting implications for API users and designers. The article focuses on the obstacles to learning an API. Although learnability is only one dimension of usability, there's a clear relationship between the two, in that difficult-to-use APIs are likely to be difficult to learn as well. Many API usability studies focus on situations where developers are learning to use an API. The author concludes that as APIs keep growing larger, developers will need to learn a proportionally smaller fraction of the whole. In such situations, the way to foster more efficient API learning experiences is to include more sophisticated means for developers to identify the information and the resources they need-even for well-designed and documented APIs.","DOI":"10.1109/MS.2009.193","ISSN":"0740-7459","title-short":"What Makes APIs Hard to Learn?","author":[{"family":"Robillard","given":"M. P."}],"issued":{"date-parts":[[2009,11]]}},
  {"id":"kaprosUsabilityEducationalTechnology2015","type":"paper-conference","title":"Usability of Educational Technology APIs: Findings and Guidelines","container-title":"Learning and Collaboration Technologies","collection-title":"Lecture Notes in Computer Science","publisher":"Springer International Publishing","page":"249-260","source":"Springer Link","abstract":"This paper describes a project that reviewed the usability of existing Educational Technology Application Programming Interfaces (EdTech APIs). The focus was on web-based APIs and the portals through which these are offered to developers. After analysing the state of art with regard to existing EdTech APIs and after conducting a literature review on API usability, a survey was circulated among developers and CTOs of EdTech organisations. The results of the aforementioned three steps were triangulated and resulted in usability guidelines for EdTech APIs. The contribution of this project is twofold: firstly, the production of a concrete set of EdTech API usability guidelines and, secondly, their implementation in a proof-of-concept a portal for two different EdTech offerings.","ISBN":"978-3-319-20609-7","title-short":"Usability of Educational Technology APIs","language":"en","author":[{"family":"Kapros","given":"Evangelos"},{"family":"Peirce","given":"Neil"}],"editor":[{"family":"Zaphiris","given":"Panayiotis"},{"family":"Ioannou","given":"Andri"}],"issued":{"date-parts":[[2015]]}},
  {"id":"beatonUsabilityChallengesEnterprise2008","type":"paper-conference","title":"Usability challenges for enterprise service-oriented architecture APIs","container-title":"2008 IEEE Symposium on Visual Languages and Human-Centric Computing","page":"193-196","source":"IEEE Xplore","event":"2008 IEEE Symposium on Visual Languages and Human-Centric Computing","abstract":"An important part of many programming tasks is the use of libraries and other forms of application programming interfaces (APIs). Programming via Web services using a service-oriented architecture (SOA) is an emerging form of API usage. Web services in a business context (called enterprise SOA or E-SOA) add additional complexity in terms of the number of the services, the variety of internal data structures, and service interdependencies. After altering existing human-computer interaction (HCI) methodologies to address the unique context of software development for SOA, we evaluated a large E-SOA API and identified many usability challenges. Prominent results include difficulties developers encountered while assembling data structures in Web service parameters, cycles of errors due to unclear control parameters within data structures, and difficulties with understanding long identifier names. We recommend a tolerance for unspecified objects in automatically-generated Web service proxy code, consistent data structures in parame ters across services, and encoding optional namespace schemes into WSDL files.","DOI":"10.1109/VLHCC.2008.4639084","author":[{"family":"Beaton","given":"J."},{"literal":"Sae Young Jeong"},{"literal":"Yingyu Xie"},{"family":"Stylos","given":"J."},{"family":"Myers","given":"B. A."}],"issued":{"date-parts":[[2008,9]]}},
  {"id":"seyedmehdinasehiUnitTestsAPI2010","type":"paper-conference","title":"Unit tests as API usage examples","container-title":"2010 IEEE International Conference on Software Maintenance","page":"1-10","source":"IEEE Xplore","event":"2010 IEEE International Conference on Software Maintenance","abstract":"This study aims to find out if API unit tests can provide good usage examples, and if so, what prevents developers from finding and using those examples. The results of an experiment we performed with two groups of developers showed that unit tests can be very helpful, especially when the task is complicated and involves multiple classes and methods. Well-written tests proved to be a good source of examples, but finding the relevant examples using the standard tools might be very difficult. We propose to supplement the standard API documentation with relevant examples taken from the unit tests. To further improve the learnability of the API, presentation of the documentation and examples has to be tailored in a way that separates or hides advanced usage scenarios from the commonly used ones.","DOI":"10.1109/ICSM.2010.5609553","author":[{"literal":"Seyed Mehdi Nasehi"},{"family":"Maurer","given":"F."}],"issued":{"date-parts":[[2010,9]]}},
  {"id":"cardPsychologyHumanComputerInteraction2018","type":"book","title":"The Psychology of Human-Computer Interaction","publisher":"CRC Press","source":"www.taylorfrancis.com","abstract":"Defines the psychology of human-computer interaction, showing how to span the gap between science & application. Studies the behavior of users in interacting","URL":"https://www.taylorfrancis.com/books/9780203736166","ISBN":"978-0-203-73616-6","language":"en","author":[{"family":"Card","given":"Stuart K."}],"issued":{"date-parts":[[2018,5,4]]},"accessed":{"date-parts":[[2019,5,17]]},"DOI":"10.1201/9780203736166"},
  {"id":"gerkenConceptMapsMethod2011","type":"paper-conference","title":"The Concept Maps Method As a Tool to Evaluate the Usability of APIs","container-title":"Proceedings of the SIGCHI Conference on Human Factors in Computing Systems","collection-title":"CHI '11","publisher":"ACM","page":"3373–3382","source":"ACM Digital Library","abstract":"Application programming interfaces (APIs) are the interfaces to existing code structures, such as widgets, frameworks, or toolkits. Therefore, they very much do have an impact on the quality of the resulting system. So, ensuring that developers can make the most out of them is an important challenge. However standard usability evaluation methods as known from HCI have limitations in grasping the interaction between developer and API as most IDEs (essentially the GUI) capture only part of it. In this paper we present the Concept Map method to study the usability of an API over time. This allows us to elicit the mental model of a programmer when using an API and thereby identify usability issues and learning barriers and their development over time.","URL":"http://doi.acm.org/10.1145/1978942.1979445","DOI":"10.1145/1978942.1979445","ISBN":"978-1-4503-0228-9","author":[{"family":"Gerken","given":"Jens"},{"family":"Jetter","given":"Hans-Christian"},{"family":"Zöllner","given":"Michael"},{"family":"Mader","given":"Martin"},{"family":"Reiterer","given":"Harald"}],"issued":{"date-parts":[[2011]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Vancouver, BC, Canada"},
  {"id":"brunetStructuralConformanceChecking2011","type":"paper-conference","title":"Structural conformance checking with design tests: An evaluation of usability and scalability","container-title":"2011 27th IEEE International Conference on Software Maintenance (ICSM)","page":"143-152","source":"IEEE Xplore","event":"2011 27th IEEE International Conference on Software Maintenance (ICSM)","abstract":"Verifying whether a software meets its functional requirements plays an important role in software development. However, this activity is necessary, but not sufficient to assure software quality. It is also important to check whether the code meets its design specification. Although there exists substantial tool support to assure that a software does what it is supposed to do, verifying whether it conforms to its design remains as an almost completely manual activity. In a previous work, we proposed design tests - test-like programs that automatically check implementations against design rules. Design test is an application of the concept of test to design conformance checking. To support design tests for Java projects, we developed DesignWizard, an API that allows developers to write and execute design tests using the popular JUnit testing framework. In this work, we present a study on the usability and scalability of DesignWizard to support structural conformance checking through design tests. We conducted a qualitative usability evaluation of DesignWizard using the Think Aloud Protocol for APIs. In the experiment, we challenged eleven developers to compose design tests for an open-source software project. We observed that the API meets most developers' expectations and that they had no difficulties to code design rules as design tests. To assess its scalability, we evaluated DesignWizard's use of CPU time and memory consumption. The study indicates that both are linear functions of the size of software under verification.","DOI":"10.1109/ICSM.2011.6080781","title-short":"Structural conformance checking with design tests","author":[{"family":"Brunet","given":"J."},{"family":"Serey","given":"D."},{"family":"Figueiredo","given":"J."}],"issued":{"date-parts":[[2011,9]]}},
  {"id":"sushineSearchingStateSpace2015","type":"paper-conference","title":"Searching the State Space: A Qualitative Study of API Protocol Usability","container-title":"Proceedings of the 2015 IEEE 23rd International Conference on Program Comprehension","collection-title":"ICPC '15","publisher":"IEEE Press","page":"82–93","source":"ACM Digital Library","abstract":"Application Programming Interfaces (APIs) often define protocols --- restrictions on the order of client calls to API methods. API protocols are common and difficult to use, which has generated tremendous research effort in alternative specification, implementation, and verification techniques. However, little is understood about the barriers programmers face when using these APIs, and therefore the research effort may be misdirected. To understand these barriers better, we perform a two-part qualitative study. First, we study developer forums to identify problems that developers have with protocols. Second, we perform a think-aloud observational study, in which we systematically observe professional programmers struggle with these same problems to get more detail on the nature of their struggles and how they use available resources. In our observations, programmer time was spent primarily on four types of searches of the protocol state space. These observations suggest protocol-targeted tools, languages, and verification techniques will be most effective if they enable programmers to efficiently perform state search.","URL":"http://dl.acm.org/citation.cfm?id=2820282.2820295","title-short":"Searching the State Space","author":[{"family":"Sushine","given":"Joshua"},{"family":"Herbsleb","given":"James D."},{"family":"Aldrich","given":"Jonathan"}],"issued":{"date-parts":[[2015]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"Piscataway, NJ, USA","event-place":"Florence, Italy"},
  {"id":"wangRecommendingPostsConcerning2015","type":"paper-conference","title":"Recommending Posts concerning API Issues in Developer Q A Sites","container-title":"2015 IEEE/ACM 12th Working Conference on Mining Software Repositories","page":"224-234","source":"IEEE Xplore","event":"2015 IEEE/ACM 12th Working Conference on Mining Software Repositories","abstract":"API design is known to be a challenging craft, as API designers must balance their elegant ideals against \"real-world\" concerns, such as utility, performance, backwards compatibility, and unforeseen emergent uses. However, to date, there is no principled method to collect or analyze API usability information that incorporates input from typical developers. In practice, developers often turn to Q&A websites such as stackoverflow.com (SO) when seeking expert advice on API use, the popularity of such sites has thus led to a very large volume of unstructured information that can be searched with diligence for answers to specific questions. The collected wisdom within such sites could, in principle, be of great help to API designers to better support developer needs, if only it could be collected, analyzed, and distilled for practical use. In this paper, we present a methodology that combines several techniques, including social network analysis and topic mining, to recommend SO posts that are likely to concern API design-related issues. To establish a comparison baseline, we introduce two more recommendation approaches: a reputation-based recommender and a random recommender. We have found that when applied to Q&A discussion of two popular mobile platforms, Android and iOS, our methodology achieves up to 93% accuracy and is more stable with its recommendations when compared to the two baseline techniques.","DOI":"10.1109/MSR.2015.28","author":[{"family":"Wang","given":"W."},{"family":"Malik","given":"H."},{"family":"Godfrey","given":"M. W."}],"issued":{"date-parts":[[2015,5]]}},
  {"id":"suNaturalLanguageInterfaces2018","type":"paper-conference","title":"Natural Language Interfaces with Fine-Grained User Interaction: A Case Study on Web APIs","container-title":"The 41st International ACM SIGIR Conference on Research & Development in Information Retrieval","collection-title":"SIGIR '18","publisher":"ACM","page":"855–864","source":"ACM Digital Library","abstract":"The rapidly increasing ubiquity of computing puts a great demand on next-generation human-machine interfaces. Natural language interfaces, exemplified by virtual assistants like Apple Siri and Microsoft Cortana, are widely believed to be a promising direction. However, current natural language interfaces provide users with little help in case of incorrect interpretation of user commands. We hypothesize that the support of fine-grained user interaction can greatly improve the usability of natural language interfaces. In the specific setting of natural language interface to web APIs, we conduct a systematic study to verify our hypothesis. To facilitate this study, we propose a novel modular sequence-to-sequence model to create interactive natural language interfaces. By decomposing the complex prediction process of a typical sequence-to-sequence model into small, highly-specialized prediction units called modules, it becomes straightforward to explain the model prediction to the user, and solicit user feedback to correct possible prediction errors at a fine-grained level. We test our hypothesis by comparing an interactive natural language interface with its non-interactive version through both simulation and human subject experiments with real-world APIs. We show that with the interactive natural language interface, users can achieve a higher success rate and a lower task completion time, which lead to greatly improved user satisfaction.","URL":"http://doi.acm.org/10.1145/3209978.3210013","DOI":"10.1145/3209978.3210013","ISBN":"978-1-4503-5657-2","title-short":"Natural Language Interfaces with Fine-Grained User Interaction","author":[{"family":"Su","given":"Yu"},{"family":"Hassan Awadallah","given":"Ahmed"},{"family":"Wang","given":"Miaosen"},{"family":"White","given":"Ryen W."}],"issued":{"date-parts":[[2018]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Ann Arbor, MI, USA"},
  {"id":"beatonUsabilityEvaluationEnterprise2008","type":"paper-conference","title":"Usability evaluation for enterprise SOA APIs","container-title":"Proceedings of the 2nd international workshop on Systems development in SOA environments  - SDSOA '08","publisher":"ACM Press","page":"29","source":"DOI.org (Crossref)","event":"the 2nd international workshop","abstract":"SAP recently began offering access to web services through its Enterprise Service-Oriented Architecture (ESOA) platform. It is in the best interest of SAP that its ESOA service operations are easier for developers to use and understand, which will contribute to higher E-SOA adoption, and a more effective means of innovation on the part of business customers. To facilitate such a change, Carnegie Mellon University’s Human-Computer Interaction Institute is working with SAP’s E-SOA and Business Process Renovation Teams to analyze the E-SOA interfaces using HCI techniques and determine means by which developers assigned to create SOA APIs in general, and Enterprise SOA APIs in particular, can design superior interfaces. The identification of usable design patterns, and methodologies to determine these patterns, can streamline SOA projects for API developers and programmers who use SOA APIs.","URL":"http://portal.acm.org/citation.cfm?doid=1370916.1370924","DOI":"10.1145/1370916.1370924","ISBN":"978-1-60558-029-6","language":"en","author":[{"family":"Beaton","given":"Jack K."},{"family":"Myers","given":"Brad A."},{"family":"Stylos","given":"Jeffrey"},{"family":"Jeong","given":"Sae Young (Sophie)"},{"family":"Xie","given":"Yingyu (Clare)"}],"issued":{"date-parts":[[2008]]},"accessed":{"date-parts":[[2019,5,17]]},"publisher-place":"Leipzig, Germany"},
  {"id":"mindermannUsabilitySecurityEffects2018","type":"paper-conference","title":"Usability and Security Effects of Code Examples on Crypto APIs","container-title":"2018 16th Annual Conference on Privacy, Security and Trust (PST)","page":"1-2","source":"IEEE Xplore","event":"2018 16th Annual Conference on Privacy, Security and Trust (PST)","abstract":"Context: Cryptographic APIs are said to be not usable and researchers suggest to add example code to the documentation. Aim: We wanted to create a free platform for cryptographic code examples that improves the usability and security of created applications by non security experts. Method: We created the open-source web platform CryptoExamples and conducted a controlled experiment where 58 students added symmetric encryption to a Java program. We then measured the usability and security. Results: The participants who used the platform were not only significantly more effective (+73 %) but also their code contained significantly less possible security vulnerabilities (-66 %). Conclusions: With CryptoExamples the gap between hard to change API documentation and the need for complete and secure code examples can be closed. Still, the platform needs more code examples.","DOI":"10.1109/PST.2018.8514203","author":[{"family":"Mindermann","given":"K."},{"family":"Wagner","given":"S."}],"issued":{"date-parts":[[2018,8]]}},
  {"id":"greenUsabilityAnalysisVisual1996","type":"article-journal","title":"Usability Analysis of Visual Programming Environments: A ‘Cognitive Dimensions’ Framework","container-title":"Journal of Visual Languages & Computing","page":"131-174","volume":"7","issue":"2","source":"DOI.org (Crossref)","abstract":"The cognitive dimensions framework is a broad-brush evaluation technique for interactive devices and for non-interactive notations. It sets out a small vocabulary of terms designed to capture the cognitively-relevant aspects of structure, and shows how they can be traded off against each other. The purpose of this paper is to propose the framework as an evaluation technique for visual programming environments. We apply it to two commercially-available dataflow languages (with further examples from other systems) and conclude that it is effective and insightful; other HCI-based evaluation techniques focus on different aspects and would make good complements. Insofar as the examples we used are representative, current VPLs are successful in achieving a good ‘closeness of match’, but designers need to consider the ‘viscosity’ (resistance to local change) and the ‘secondary notation’ (possibility of conveying extra meaning by choice of layout, colour, etc.).","URL":"https://linkinghub.elsevier.com/retrieve/pii/S1045926X96900099","DOI":"10.1006/jvlc.1996.0009","ISSN":"1045926X","title-short":"Usability Analysis of Visual Programming Environments","language":"en","author":[{"family":"Green","given":"T.R.G."},{"family":"Petre","given":"M."}],"issued":{"date-parts":[[1996,6]]},"accessed":{"date-parts":[[2019,5,16]]},"container-title-short":"Journal of Visual Languages & Computing"},
  {"id":"spizaTypeNamesStatic2014","type":"paper-conference","title":"Type Names Without Static Type Checking Already Improve the Usability of APIs (As Long As the Type Names Are Correct): An Empirical Study","container-title":"Proceedings of the 13th International Conference on Modularity","collection-title":"MODULARITY '14","publisher":"ACM","page":"99–108","source":"ACM Digital Library","abstract":"In the discussion about the usefulness of static or dynamic type systems there is often the statement that static type systems improve the documentation of software. In the meantime there exists even some empirical evidence for this statement. One of the possible explanations for this positive influence is that the static type system of programming languages such as Java require developers to write down the type names, i.e. lexical representations which potentially help developers. Because of that there is a plausible hypothesis that the main benefit comes from the type names and not from the static type checks that are based on these names. In order to argue for or against static type systems it is desirable to check this plausible hypothesis in an experimental way. This paper describes an experiment with 20 participants that has been performed in order to check whether developers using an unknown API already benefit (in terms of development time) from the pure syntactical representation of type names without static type checking. The result of the study is that developers do benefit from the type names in an API's source code. But already a single wrong type name has a measurable significant negative impact on the development time in comparison to APIs without type names.","URL":"http://doi.acm.org/10.1145/2577080.2577098","DOI":"10.1145/2577080.2577098","ISBN":"978-1-4503-2772-5","title-short":"Type Names Without Static Type Checking Already Improve the Usability of APIs (As Long As the Type Names Are Correct)","author":[{"family":"Spiza","given":"Samuel"},{"family":"Hanenberg","given":"Stefan"}],"issued":{"date-parts":[[2014]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Lugano, Switzerland"},
  {"id":"zghidiFormalAPIAssessment2018","type":"paper-conference","title":"Towards a Formal API Assessment","container-title":"Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings","collection-title":"ICSE '18","publisher":"ACM","page":"398–399","source":"ACM Digital Library","abstract":"Assessing the quality of an API is important in many different aspects: First, it can assist developers in deciding which API to use when they are faced with a list of potential APIs to choose from, by comparing the benefits and drawbacks of each option [1]; we refer to this as the API selection problem. Second, it can help guide the design process and expose problem areas in early stages of API design, even before implementing the actual API [2]; we refer to this as the API design problem. In order to assess the quality of an API, various evaluation methods have been used: some are based on empirical laboratory studies, gathering feedback from API users; others are based on inspection methods where experts evaluate the quality of an API based on a list of design guidelines [3] [4] such as Nielsen's heuristics and the cognitive dimensions framework [2] [5]. In this paper, we are particularly interested in extending Steven Clarke's approach of measuring API usability based on the cognitive dimensions framework [5]. The usability of an API is assessed by comparing the API (what it actually offers) with the profiles of its potential users (what they expect out of it).","URL":"http://doi.acm.org/10.1145/3183440.3195026","DOI":"10.1145/3183440.3195026","ISBN":"978-1-4503-5663-3","author":[{"family":"Zghidi","given":"Amir"},{"family":"Hammouda","given":"Imed"},{"family":"Hnich","given":"Brahim"}],"issued":{"date-parts":[[2018]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Gothenburg, Sweden"},
  {"id":"koRoleConceptualKnowledge2011","type":"paper-conference","title":"The role of conceptual knowledge in API usability","container-title":"2011 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)","page":"173-176","source":"IEEE Xplore","event":"2011 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)","abstract":"While many studies have investigated the challenges that developers face in finding and using API documentation, few have considered the role of developers' conceptual knowledge in these tasks. We designed a study in which developers were asked to explore the feasibility of two requirements concerning networking protocols and application platforms that most participants were unfamiliar with, observing the effect that a lack of conceptual knowledge had on their use of documentation. Our results show that without conceptual knowledge, developers struggled to formulate effective queries and to evaluate the relevance or meaning of content they found. Our results suggest that API documentation should not only include detailed examples of API use, but also thorough introductions to the concepts, standards, and ideas manifested in an API's data structures and functionality.","DOI":"10.1109/VLHCC.2011.6070395","author":[{"family":"Ko","given":"A. J."},{"family":"Riche","given":"Y."}],"issued":{"date-parts":[[2011,9]]}},
  {"id":"stylosImplicationsMethodPlacement2008","type":"paper-conference","title":"The Implications of Method Placement on API Learnability","container-title":"Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering","collection-title":"SIGSOFT '08/FSE-16","publisher":"ACM","page":"105–112","source":"ACM Digital Library","abstract":"To better understand what makes Application Programming Interfaces (APIs) hard to use and how to improve them, recent research has begun studying programmers' strategies and use of APIs. It was found that method placement --- on which class or classes a method is placed --- can have large usability impact in object-oriented APIs. This was because programmers often start their exploration of an API from one \"main\" object, and were slower finding other objects that were not referenced in the methods of the main object. For example, while mailServer.send(mailMessage) might make sense, if programmers often begin their API explorations from the MailMessage class, then this makes it harder to find the MailServer class than the alternative mailMessage.send(mailServer). This is interesting because many real APIs place methods essential to common objects on other, helper objects. Alternate versions of three different APIs were compared, and it was found that programmers gravitated toward the same starting classes and were dramatically faster --- between 2 to 11 times --- combining multiple objects when a method on the starting class referred to the other class.","URL":"http://doi.acm.org/10.1145/1453101.1453117","DOI":"10.1145/1453101.1453117","ISBN":"978-1-59593-995-1","author":[{"family":"Stylos","given":"Jeffrey"},{"family":"Myers","given":"Brad A."}],"issued":{"date-parts":[[2008]]},"accessed":{"date-parts":[[2019,5,8]]},"publisher-place":"New York, NY, USA","event-place":"Atlanta, Georgia"},
  {"id":"ellisFactoryPatternAPI2007","type":"paper-conference","title":"The Factory Pattern in API Design: A Usability Evaluation","container-title":"29th International Conference on Software Engineering (ICSE'07)","page":"302-312","source":"IEEE Xplore","event":"29th International Conference on Software Engineering (ICSE'07)","abstract":"The usability of software APIs is an important and infrequently researched topic. A user study comparing the usability of the factory pattern and constructors in API designs found highly significant results indicating that factories are detrimental to API usability in several varied situations. The results showed that users require significantly more time (p = 0.005) to construct an object with a factory than with a constructor while performing both context-sensitive and context- free tasks. These results suggest that the use of factories can and should be avoided in many cases where other techniques, such as constructors or class clusters, can be used instead.","DOI":"10.1109/ICSE.2007.85","title-short":"The Factory Pattern in API Design","author":[{"family":"Ellis","given":"B."},{"family":"Stylos","given":"J."},{"family":"Myers","given":"B."}],"issued":{"date-parts":[[2007,5]]}},
  {"id":"ramaStructuralMeasuresAPI2015","type":"article-journal","title":"Some structural measures of API usability","container-title":"Software: Practice and Experience","page":"75-110","volume":"45","issue":"1","source":"Wiley Online Library","abstract":"In this age of collaborative software development, the importance of usable APIs is well recognized. There already exists a rich body of literature that addresses issues ranging from how to design usable APIs to assessing qualitatively the usability of a given API. However, there does not yet exist a set of general-purpose metrics that can be pressed into service for a more quantitative assessment of API usability. The goal of this paper is to remedy this shortcoming in the literature. Our work presents a set of formulas that examine the API method declarations from the perspective of several commonly held beliefs regarding what makes APIs difficult to use. We validate the numerical characterizations of API usability as produced by our metrics through the APIs of several software systems. Copyright © 2013 John Wiley & Sons, Ltd.","URL":"https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.2215","DOI":"10.1002/spe.2215","ISSN":"1097-024X","language":"en","author":[{"family":"Rama","given":"Girish Maskeri"},{"family":"Kak","given":"Avinash"}],"issued":{"date-parts":[[2015]]},"accessed":{"date-parts":[[2019,5,8]]}},
  {"id":"xuMULAPIImprovingAPI2018","type":"article-journal","title":"MULAPI: Improving API method recommendation with API usage location","container-title":"Journal of Systems and Software","page":"195-205","volume":"142","source":"ScienceDirect","abstract":"During the evolution of a software system, a large number of feature requests are continuously proposed by users. To implement these feature requests, developers often utilize existing third-party libraries and make use of Application Programming Interfaces (APIs) to accelerate the feature implementation process. However, it is not always obvious which API methods are suitable and where these API methods can be used in the target program. In this paper, we propose an approach, MULAPI (Method Usage and Location for API), to recommend API methods and figure out the API usage location where these API methods would be used. MULAPI employs feature location to identify feature related files as API usage location. Further, these feature related files are taken into account to recommend API methods by exploring the source code repository and API libraries as well. We evaluate MULAPI on more than 1000 feature requests of eight Java projects (Axis/Java, CXF, Hadoop Common, Hbase, Struts2, Hadoop HDFS, Hive and Hadoop Map/Reduce), and recommend API methods from ten third-party libraries. The empirical results show that MULAPI can accurately recommend API methods and usage location, and moreover, MULAPI improves the effectiveness of API method recommendation, compared with the state-of-the-art approach.","URL":"http://www.sciencedirect.com/science/article/pii/S0164121218300840","DOI":"10.1016/j.jss.2018.04.060","ISSN":"0164-1212","title-short":"MULAPI","author":[{"family":"Xu","given":"Congying"},{"family":"Sun","given":"Xiaobing"},{"family":"Li","given":"Bin"},{"family":"Lu","given":"Xintong"},{"family":"Guo","given":"Hongjing"}],"issued":{"date-parts":[[2018,8,1]]},"accessed":{"date-parts":[[2019,5,23]]},"container-title-short":"Journal of Systems and Software"},
  {"id":"grillMethodsAPIUsability2012","type":"paper-conference","title":"Methods towards API Usability: A Structural Analysis of Usability Problem Categories","container-title":"Human-Centered Software Engineering","collection-title":"Lecture Notes in Computer Science","publisher":"Springer Berlin Heidelberg","page":"164-180","source":"Springer Link","abstract":"The usability of Application Programming Interfaces (APIs) is one of the main factors defining the success of a software based framework. Research in the area of human computer interaction (HCI) currently mainly focuses on end-user usability and only little research has been done regarding the usability of APIs. In this paper, we present a methodology on how to use and combine HCI methods with the goal to evaluate the usability of APIs. The methodology consist of three phases - a heuristic evaluation, a developer workshop and interviews. We setup a case-study according to the methodology, in which we are evaluating the usability of a service-oriented framework API. The goal was to explore different HCI methods and compare the applicability of such methods to find usability problems in an API. The case-study combined qualitative and quantitative methods in order to investigate the usability and intuitiveness of the API itself. It allowed us to identify relevant problem areas for usability related issues that could be mapped to specific types of HCI methods. Examples for this are e.g. structural problems, which are identified mainly in inspection methods, while problems regarding errors and exception handling are mainly identified during the hands-on example part of the developer workshops conducted. The resulting problem areas allow us to develop a first classification of API related usability problems that are making the relevancy of usability issues for APIs more explicit and applicable.","ISBN":"978-3-642-34347-6","title-short":"Methods towards API Usability","language":"en","author":[{"family":"Grill","given":"Thomas"},{"family":"Polacek","given":"Ondrej"},{"family":"Tscheligi","given":"Manfred"}],"editor":[{"family":"Winckler","given":"Marco"},{"family":"Forbrig","given":"Peter"},{"family":"Bernhaupt","given":"Regina"}],"issued":{"date-parts":[[2012]]}},
  {"id":"schellerMeasurableConceptsUsability2011","type":"paper-conference","title":"Measurable Concepts for the Usability of Software Components","container-title":"2011 37th EUROMICRO Conference on Software Engineering and Advanced Applications","page":"129-133","source":"IEEE Xplore","event":"2011 37th EUROMICRO Conference on Software Engineering and Advanced Applications","abstract":"While usability has proven to be an important software quality attribute, its application to APIs is still rather uncommon. Available methods for measuring software usability show significant disadvantages when applied to APIs, like the need for test users and experienced evaluators. This makes it difficult to evaluate the usability of software components, as well as to compare different software components. An API usability measurement method is needed that is both machine-computable and objective. This paper takes a first step in the direction of such a measure by identifying measurable concepts for the usability of software components, and validating these concepts against existing studies and guidelines for usability and API design.","DOI":"10.1109/SEAA.2011.28","author":[{"family":"Scheller","given":"T."},{"family":"Kuhn","given":"E."}],"issued":{"date-parts":[[2011,8]]}},
  {"id":"stylosInformingAPIDesign2006","type":"paper-conference","title":"Informing API Design through Usability Studies of API Design Choices: A Research Abstract","container-title":"Visual Languages and Human-Centric Computing (VL/HCC'06)","page":"246-247","source":"IEEE Xplore","event":"Visual Languages and Human-Centric Computing (VL/HCC'06)","abstract":"Using APIs is a common and often difficult task for developers. Successful API designs can guide users of an API and reduce their dependence on documentation; however API design is far from a science. Usability lab studies have been shown to be successful at improving the usability of specific APIs; however these are expensive and not always possible to run for every API. This paper describes an approach to generalize from studies of specific APIs to investigate the usability impact of design choices that commonly arise in the creation of APIs. Based on these results we will inform the design of many new APIs. A preliminary usability study of whether or not to require constructor parameters confirms our belief that the answer to common design decisions is not always obvious, and making the wrong choice can have a strong negative impact on usability for large groups of API users","DOI":"10.1109/VLHCC.2006.27","title-short":"Informing API Design through Usability Studies of API Design Choices","author":[{"family":"Stylos","given":"J."}],"issued":{"date-parts":[[2006,9]]}},
  {"id":"schellerInfluencingFactorsUsability2012","type":"paper-conference","title":"Influencing Factors on the Usability of API Classes and Methods","container-title":"2012 IEEE 19th International Conference and Workshops on Engineering of Computer-Based Systems","page":"232-241","source":"IEEE Xplore","event":"2012 IEEE 19th International Conference and Workshops on Engineering of Computer-Based Systems","abstract":"Usability is an important quality attribute for APIs. To create APIs with good usability, appropriate measurement methods are needed. But currently available methods are cost- and time-expensive and the results are not objective and therefore hard to quantify. API design guidelines give a good overview about important usability factors, but lack a scientific basis. When looking at scientific API usability studies, only a very small area of API design has been researched yet. Existing results don't give enough basis for a good API usability measurement method. In this paper we identify influencing usability factors for the two most common concepts of APIs: classes and methods. We therefore conduct a study with 20 programmers and 2 different API variants and evaluate how differences between the APIs influence usability when instantiating classes and calling methods. The results build a basis for API usability measurement methods and should help design more usable APIs.","DOI":"10.1109/ECBS.2012.27","author":[{"family":"Scheller","given":"T."},{"family":"Kuhn","given":"E."}],"issued":{"date-parts":[[2012,4]]}},
  {"id":"watsonImprovingSoftwareAPI2009","type":"paper-conference","title":"Improving software API usability through text analysis: A case study","container-title":"2009 IEEE International Professional Communication Conference","page":"1-7","source":"IEEE Xplore","event":"2009 IEEE International Professional Communication Conference","abstract":"Technical writers who want to be more involved in the earlier stages of software product development must often find ways to demonstrate how their skills can benefit the initial design process. This case study describes how the application of technical communication skills and tools helped improve the usability and clarity of a new application program interface (API) by performing a text analysis of the API elements. The case study presents the theory upon which this approach is grounded and describes how the theory was applied to analyze a specific API. The paper concludes with a review of how this analysis method could be transferred to other projects and how the tools used in this analysis can be applied to benefit the design, development, and documentation processes of APIs.","DOI":"10.1109/IPCC.2009.5208679","title-short":"Improving software API usability through text analysis","author":[{"family":"Watson","given":"R. B."}],"issued":{"date-parts":[[2009,7]]}},
  {"id":"jeongImprovingDocumentationESOA2009","type":"chapter","title":"Improving Documentation for eSOA APIs through User Studies","container-title":"End-User Development","publisher":"Springer Berlin Heidelberg","page":"86-105","volume":"5435","source":"DOI.org (Crossref)","abstract":"All software today is written using libraries, toolkits, frameworks and other application programming interfaces (APIs). We performed a user study of the online documentation a large and complex API for Enterprise ServiceOriented Architecture (eSOA), which identified many issues and recommendations for making API documentation easier to use. eSOA is an appropriate testbed because the target user groups range from high-level business experts who do not have significant programming expertise (and thus are endparticipant developers), to professional programmers. Our study showed that the participants’ background influenced how they navigated the documentation. Lack of familiarity with business terminology was a barrier we observed for developers without business application experience. Participants with business software experience had difficulty differentiating similarly named services. Both groups avoided areas of the documentation that had an inconsistent visual design. A new design for the documentation that supports flexible navigation strategies seem to be required to support the wide range of users for eSOA. This paper summarizes our study and provides recommendations for future documentation for developers.","URL":"http://link.springer.com/10.1007/978-3-642-00427-8_6","ISBN":"978-3-642-00425-4 978-3-642-00427-8","language":"en","editor":[{"family":"Pipek","given":"Volkmar"},{"family":"Rosson","given":"Mary Beth"},{"family":"Ruyter","given":"Boris","non-dropping-particle":"de"},{"family":"Wulf","given":"Volker"}],"author":[{"family":"Jeong","given":"Sae Young"},{"family":"Xie","given":"Yingyu"},{"family":"Beaton","given":"Jack"},{"family":"Myers","given":"Brad A."},{"family":"Stylos","given":"Jeff"},{"family":"Ehret","given":"Ralf"},{"family":"Karstens","given":"Jan"},{"family":"Efeoglu","given":"Arkin"},{"family":"Busse","given":"Daniela K."}],"issued":{"date-parts":[[2009]]},"accessed":{"date-parts":[[2019,5,8]]},"publisher-place":"Berlin, Heidelberg","DOI":"10.1007/978-3-642-00427-8_6"},
  {"id":"myersImprovingAPIUsability2016","type":"article-journal","title":"Improving API usability","container-title":"Communications of the ACM","page":"62-69","volume":"59","issue":"6","source":"DOI.org (Crossref)","URL":"http://dl.acm.org/citation.cfm?doid=2942427.2896587","DOI":"10.1145/2896587","ISSN":"00010782","language":"en","author":[{"family":"Myers","given":"Brad A."},{"family":"Stylos","given":"Jeffrey"}],"issued":{"date-parts":[[2016,5,23]]},"accessed":{"date-parts":[[2019,5,8]]},"container-title-short":"Commun. ACM"},
  {"id":"stylosImprovingAPIDocumentation2009","type":"paper-conference","title":"Improving API documentation using API usage information","container-title":"2009 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)","page":"119-126","source":"IEEE Xplore","event":"2009 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)","abstract":"Jadeite is a new Javadoc-like API documentation system that takes advantage of multiple users' aggregate experience to reduce difficulties that programmers have learning new APIs. Previous studies have shown that programmers often guessed that certain classes or methods should exist, and looked for these in the API. Jadeite's ldquoplaceholdersrdquo let users add new ldquopretendrdquo classes or methods that are displayed in the actual API documentation, and can be annotated with the appropriate APIs to use instead. Since studies showed that programmers had difficulty finding the right classes from long lists in documentation, Jadeite takes advantage of usage statistics to display commonly used classes more prominently. Programmers had difficulty discovering how to instantiate objects, so Jadeite uses a large corpus of sample code to automatically the most common ways to construct an instance of any given class. An evaluation showed that programmers were about three times faster at performing common tasks with Jadeite than with standard Javadoc.","DOI":"10.1109/VLHCC.2009.5295283","author":[{"family":"Stylos","given":"J."},{"family":"Faulring","given":"A."},{"family":"Yang","given":"Z."},{"family":"Myers","given":"B. A."}],"issued":{"date-parts":[[2009,9]]}},
  {"id":"dekelImprovingAPIDocumentation2009","type":"paper-conference","title":"Improving API Documentation Usability with Knowledge Pushing","container-title":"Proceedings of the 31st International Conference on Software Engineering","collection-title":"ICSE '09","publisher":"IEEE Computer Society","page":"320–330","source":"ACM Digital Library","abstract":"The documentation of API functions typically conveys detailed specifications for the benefit of interested readers. In some cases, however, it also contains usage directives, such as rules or caveats, of which authors of invoking code must be made aware to prevent errors and inefficiencies. There is a risk that these directives may be “lost” within the verbose text, or that the text would not be read because there are so many invoked functions. To address these concerns for Java, an Eclipse plug-in named eMoose decorates method invocations whose targets have associated directives. Our goal is to lead readers to investigate further, which we aid by highlighting the tagged directives in the JavaDoc hover. We present a lab study that demonstrates the directive awareness problem in traditional documentation use and the potential benefits of our approach.","URL":"http://dx.doi.org/10.1109/ICSE.2009.5070532","DOI":"10.1109/ICSE.2009.5070532","ISBN":"978-1-4244-3453-4","author":[{"family":"Dekel","given":"Uri"},{"family":"Herbsleb","given":"James D."}],"issued":{"date-parts":[[2009]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"Washington, DC, USA"},
  {"id":"endrikatHowAPIDocumentation2014","type":"paper-conference","title":"How Do API Documentation and Static Typing Affect API Usability?","container-title":"Proceedings of the 36th International Conference on Software Engineering","collection-title":"ICSE 2014","publisher":"ACM","page":"632–642","source":"ACM Digital Library","abstract":"When developers use Application Programming Interfaces (APIs), they often rely on documentation to assist their tasks. In previous studies, we reported evidence indicating that static type systems acted as a form of implicit documentation, benefiting developer productivity. Such implicit documentation is easier to maintain, given it is enforced by the compiler, but previous experiments tested users without any explicit documentation. In this paper, we report on a controlled experiment and an exploratory study comparing the impact of using documentation and a static or dynamic type system on a development task. Results of our study both confirm previous findings and show that the benefits of static typing are strengthened with explicit documentation, but that this was not as strongly felt with dynamically typed languages.","URL":"http://doi.acm.org/10.1145/2568225.2568299","DOI":"10.1145/2568225.2568299","ISBN":"978-1-4503-2756-5","author":[{"family":"Endrikat","given":"Stefan"},{"family":"Hanenberg","given":"Stefan"},{"family":"Robbes","given":"Romain"},{"family":"Stefik","given":"Andreas"}],"issued":{"date-parts":[[2014]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Hyderabad, India"},
  {"id":"nielsenHeuristicEvaluationUser1990","type":"paper-conference","title":"Heuristic evaluation of user interfaces","container-title":"Proceedings of the SIGCHI conference on Human factors in computing systems Empowering people - CHI '90","publisher":"ACM Press","page":"249-256","source":"DOI.org (Crossref)","event":"the SIGCHI conference","abstract":"Heuristic evaluation is an informal method of usability analysis where a number of evaluators are presented with an interface design and asked to comment on it. Four experiments showed that individual evaluators were mostly quite bad at doing such heuristic evaluations and that they only found between 20 and 51% of the usability problems in the interfaces they evaluated. On the other hand, we could aggregate the evaluations from several evaluators to a single evaluation and such aggregates do rather well, even when they consist of only three to five people.","URL":"http://portal.acm.org/citation.cfm?doid=97243.97281","DOI":"10.1145/97243.97281","ISBN":"978-0-201-50932-8","language":"en","author":[{"family":"Nielsen","given":"Jakob"},{"family":"Molich","given":"Rolf"}],"issued":{"date-parts":[[1990]]},"accessed":{"date-parts":[[2019,5,17]]},"publisher-place":"Seattle, Washington, United States"},
  {"id":"cardosoEvaluationProgrammingToolkit2013","type":"paper-conference","title":"Evaluation of a Programming Toolkit for Interactive Public Display Applications","container-title":"Proceedings of the 12th International Conference on Mobile and Ubiquitous Multimedia","collection-title":"MUM '13","publisher":"ACM","page":"6:1–6:10","source":"ACM Digital Library","abstract":"Interaction is repeatedly pointed out as a key enabling element towards more engaging and valuable public displays. Still, most digital public displays today do not support any interactive features. We argue that this is mainly due to the lack of efficient and clear abstractions that developers can use to incorporate interactivity into their applications. As a consequence, interaction represents a major overhead for developers, and users are faced with inconsistent interaction models across different displays. This paper describes the results of the evaluation of a widget toolkit for generalized interaction with public displays. Our toolkit was developed for web-based applications and it supports multiple interaction mechanisms, automatically generated graphical interfaces, asynchronous events and concurrent interaction. We have evaluated the toolkit along various dimensions - system performance, API usability, and real-world deployment - and we present and discuss the results in this paper.","URL":"http://doi.acm.org/10.1145/2541831.2541834","DOI":"10.1145/2541831.2541834","ISBN":"978-1-4503-2648-3","author":[{"family":"Cardoso","given":"Jorge C. S."},{"family":"José","given":"Rui"}],"issued":{"date-parts":[[2013]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Luleå, Sweden"},
  {"id":"weberEmpiricalStudiesSecurity2017","type":"paper-conference","title":"Empirical Studies on the Security and Usability Impact of Immutability","container-title":"2017 IEEE Cybersecurity Development (SecDev)","page":"50-53","source":"IEEE Xplore","event":"2017 IEEE Cybersecurity Development (SecDev)","abstract":"Although it is well-known that API design has a large and long-term impact on security, the literature contains few substantial guidelines for practitioners on how to design APIs that improve security. Even fewer of those guidelines have been evaluated empirically. Security professionals have proposed that software engineers choose immutable APIs and architectures to enhance security. Unfortunately, prior empirical research argued that immutablity decreases API usability. This paper brings together the results from a number of previous papers that together aim to show that immutability, when carefully designed using usability as a first-class requirement, can have positive effects on both usability and security. We also make observations on study design in this field.","DOI":"10.1109/SecDev.2017.21","author":[{"family":"Weber","given":"S."},{"family":"Coblenz","given":"M."},{"family":"Myers","given":"B."},{"family":"Aldrich","given":"J."},{"family":"Sunshine","given":"J."}],"issued":{"date-parts":[[2017,9]]}},
  {"id":"watsonDevelopingBestPractices2012","type":"paper-conference","title":"Developing best practices for API reference documentation: Creating a platform to study how programmers learn new APIs","container-title":"2012 IEEE International Professional Communication Conference","page":"1-9","source":"IEEE Xplore","event":"2012 IEEE International Professional Communication Conference","abstract":"Software developers use application-programming interface (API) documentation to learn how to use the features of software libraries. How quickly software developers learn to use a library's features determines how quickly they can apply those features in a software application. Recent studies have shown that API documentation is, unfortunately, not always as helpful to software developers as they need it to be. This paper studies the prototype of a tool and a method that are being developed to help technical writers identify the elements of API reference documentation that help software developers complete programming tasks. The tool and method described in this paper use a remote user-assessment platform, which enables researchers and technical writers to study the effect that document design variations have on a large and diverse audience. Such an approach can help technical writers identify new best practices for writing effective API documentation.","DOI":"10.1109/IPCC.2012.6408606","title-short":"Developing best practices for API reference documentation","author":[{"family":"Watson","given":"R."}],"issued":{"date-parts":[[2012,10]]}},
  {"id":"lopez-fernandezDesigningEvaluatingUsability2017","type":"article-journal","title":"Designing and evaluating the usability of an API for real-time multimedia services in the Internet","container-title":"Multimedia Tools and Applications","page":"14247-14304","volume":"76","issue":"12","source":"Springer Link","abstract":"In the last few years, multimedia technologies in general, and Real-Time multimedia Communications (RTC) in particular, are becoming mainstream among WWW and smartphone developers, who have an increasing interest in richer media capabilities for creating their applications. The engineering literature proposing novel algorithms, protocols and architectures for managing and processing multimedia information is currently overwhelming. However, most of these results do not arrive to applications due to the lack of simple and usable APIs. Interestingly, in this context in which APIs are the critical ingredient for reaching wide developer audiences, the scientific literature about multimedia APIs and their usability is scarce. In this paper we try to contribute to fill this gap by proposing the RTC Media API: a novel type of API designed with the aim of making simple for developers the use of latest trends in RTC multimedia including WebRTC, Video Content Analysis or Augmented Reality. We provide a specification of such API and discuss how it satisfies a set of design requirements including programming-language agnosticism, adaptation to cloud environments, support to multisensory multimedia, etc. After that, we describe an implementation of such an API that has been created in the context of the Kurento open source software project, and present a study evaluating the API usability performed in a group of more than 40 professional developers distributed worldwide. In the light of the obtained results, we conclude that the usability of the API is adequate across the main development activities (i.e. API learning, code creation and code maintenance), with an average usability score of 3.39 over 5 in a Likert scale, and that this result is robust with respect to developers’ profiles, cultures, professional experiences and preferred programming languages.","URL":"https://doi.org/10.1007/s11042-016-3729-z","DOI":"10.1007/s11042-016-3729-z","ISSN":"1573-7721","language":"en","author":[{"family":"López-Fernández","given":"Luis"},{"family":"García","given":"Boni"},{"family":"Gallego","given":"Micael"},{"family":"Gortázar","given":"Francisco"}],"issued":{"date-parts":[[2017,6,1]]},"accessed":{"date-parts":[[2019,5,23]]},"container-title-short":"Multimed Tools Appl"},
  {"id":"santosDesignAnnotationsImprove2017","type":"article-journal","title":"Design annotations to improve API discoverability","container-title":"Journal of Systems and Software","page":"17-33","volume":"126","source":"ScienceDirect","abstract":"User studies have revealed that programmers face several obstacles when learning application programming interfaces (APIs). A considerable part of such difficulties relate to discovery of API elements and the relationships among them. To address discoverability problems, we show how to complement APIs with design annotations, which document design decisions in a program-processable form for types, methods, and parameters. The information provided by the annotations is consumed by the integrated development environment (IDE) in order to assist API users with useful code completion proposals regarding object creation and manipulation, which facilitate API exploration and learning. As a proof of concept, we developed Dacite, a tool which comprises a set of Java annotations and an accompanying plugin for the Eclipse IDE. A user study revealed that Dacite is usable and effective, and Dacite’s proposals enable programmers to be more successful in solving programming tasks involving unfamiliar APIs.","URL":"http://www.sciencedirect.com/science/article/pii/S016412121630262X","DOI":"10.1016/j.jss.2016.12.036","ISSN":"0164-1212","author":[{"family":"Santos","given":"André L."},{"family":"Myers","given":"Brad A."}],"issued":{"date-parts":[[2017,4,1]]},"accessed":{"date-parts":[[2019,5,8]]},"container-title-short":"Journal of Systems and Software"},
  {"id":"asaduzzamanContextSensitiveCodeCompletion2014","type":"paper-conference","title":"Context-Sensitive Code Completion Tool for Better API Usability","container-title":"2014 IEEE International Conference on Software Maintenance and Evolution","page":"621-624","source":"IEEE Xplore","event":"2014 IEEE International Conference on Software Maintenance and Evolution","abstract":"Developers depend on APIs of frameworks and libraries to support the development process. Due to the large number of existing APIs, it is difficult to learn, remember, and use them during the development of a software. To mitigate the problem, modern integrated development environments provide code completion facilities that free developers from remembering every detail. In this paper, we introduce CSCC, a simple, efficient context-sensitive code completion tool that leverages previous code examples to support method completion. Compared to other existing code completion tools, CSCC uses new sources of contextual information together with lightweight source code analysis to better recommend API method calls.","DOI":"10.1109/ICSME.2014.110","author":[{"family":"Asaduzzaman","given":"M."},{"family":"Roy","given":"C. K."},{"family":"Schneider","given":"K. A."},{"family":"Hou","given":"D."}],"issued":{"date-parts":[[2014,9]]}},
  {"id":"pletcherBCCEnhancingCode2009","type":"paper-conference","title":"BCC: Enhancing code completion for better API usability","container-title":"2009 IEEE International Conference on Software Maintenance","page":"393-394","source":"IEEE Xplore","event":"2009 IEEE International Conference on Software Maintenance","abstract":"Nowadays, programmers spend much of their workday dealing with code libraries and frameworks that are bloated with APIs. One common way of interacting with APIs is through Code Completion inside the code editor. By default, Code Completion presents in a scrollable list, in alphabetical order, all accessible members available in the apparent type and supertypes of a receiver expression. This default behavior for Code Completion should and can be further improved because (1) not all public methods are APIs and presenting non-API public members to a programmer is misleading, (2) certain APIs are meant to be accessible only in some limited contexts but not others, and (3) the alphabetical order separates otherwise logically related APIs, making it hard to see their connection. BCC (Better Code Completion) addresses these problems by enhancing Code Completion so that programmers can control how specific API elements should be sorted, filtered, and grouped.","DOI":"10.1109/ICSM.2009.5306289","title-short":"BCC","author":[{"family":"Pletcher","given":"D. M."},{"family":"Hou","given":"D."}],"issued":{"date-parts":[[2009,9]]}},
  {"id":"souzaAutomaticEvaluationAPI2009","type":"paper-conference","title":"Automatic evaluation of API usability using complexity metrics and visualizations","container-title":"2009 31st International Conference on Software Engineering - Companion Volume","page":"299-302","source":"IEEE Xplore","event":"2009 31st International Conference on Software Engineering - Companion Volume","abstract":"APIs are one of the most important concepts in today's modern software engineering. They allow software developers to work independently and minimize the impact caused by changes in the implementation of software services. Despite their importance, currently there are only a few approaches that guide the design of an API. In this paper, we present an approach, and associated tool, that allows an API client (developer) to evaluate the usability of an API and decide whether to use it (release it). In this aspect, our approach goes beyond previous approaches by performing this complexity and usability API analysis automatically.","DOI":"10.1109/ICSE-COMPANION.2009.5071006","author":[{"family":"Souza","given":"C. R. B.","dropping-particle":"de"},{"family":"Bentolila","given":"D. L. M."}],"issued":{"date-parts":[[2009,5]]}},
  {"id":"schellerAutomatedMeasurementAPI2015","type":"article-journal","title":"Automated measurement of API usability: The API Concepts Framework","container-title":"Information and Software Technology","page":"145-162","volume":"61","source":"ScienceDirect","abstract":"Context\nUsability is an important software quality attribute for APIs. Unfortunately, measuring it is not an easy task since many things like experienced evaluators, suitable test users, and a functional product are needed. This makes existing usability measurement methods difficult to use, especially for non-professionals.\nObjective\nTo make API usability measurement easier, an automated and objective measurement method would be needed. This article proposes such a method. Since it would be impossible to find and integrate all possible factors that influence API usability in one step, the main goal is to prove the feasibility of the introduced approach, and to define an extensible framework so that additional factors can easily be defined and added later.\nMethod\nA literature review is conducted to find potential factors influencing API usability. From these factors, a selected few are investigated more closely with usability studies. The statistically evaluated results from these studies are used to define specific elements of the introduced framework. Further, the influence of the user as a critical factor for the framework’s feasibility is evaluated.\nResults\nThe API Concepts Framework is defined, with an extensible structure based on concepts that represent the user’s actions, measurable properties that define what influences the usability of these concepts, and learning effects that represent the influence of the user’s experience. A comparison of values calculated by the framework with user studies shows promising results.\nConclusion\nIt is concluded that the introduced approach is feasible and provides useful results for evaluating API usability. The extensible framework easily allows to add new concepts and measurable properties in the future.","URL":"http://www.sciencedirect.com/science/article/pii/S0950584915000178","DOI":"10.1016/j.infsof.2015.01.009","ISSN":"0950-5849","title-short":"Automated measurement of API usability","author":[{"family":"Scheller","given":"Thomas"},{"family":"Kühn","given":"Eva"}],"issued":{"date-parts":[[2015,5,1]]},"accessed":{"date-parts":[[2019,5,8]]},"container-title-short":"Information and Software Technology"},
  {"id":"duala-ekokoAskingAnsweringQuestions2012","type":"paper-conference","title":"Asking and answering questions about unfamiliar APIs: An exploratory study","container-title":"2012 34th International Conference on Software Engineering (ICSE)","page":"266-276","source":"IEEE Xplore","event":"2012 34th International Conference on Software Engineering (ICSE)","abstract":"The increasing size of APIs and the increase in the number of APIs available imply developers must frequently learn how to use unfamiliar APIs. To identify the types of questions developers want answered when working with unfamiliar APIs and to understand the difficulty they may encounter answering those questions, we conducted a study involving twenty programmers working on different programming tasks, using unfamiliar APIs. Based on the screen captured videos and the verbalization of the participants, we identified twenty different types of questions programmers ask when working with unfamiliar APIs, and provide new insights to the cause of the difficulties programmers encounter when answering questions about the use of APIs. The questions we have identified and the difficulties we observed can be used for evaluating tools aimed at improving API learning, and in identifying areas of the API learning process where tool support is missing, or could be improved.","DOI":"10.1109/ICSE.2012.6227187","title-short":"Asking and answering questions about unfamiliar APIs","author":[{"family":"Duala-Ekoko","given":"E."},{"family":"Robillard","given":"M. P."}],"issued":{"date-parts":[[2012,6]]}},
  {"id":"dubochetImprovingAPIDocumentation2010","type":"paper-conference","title":"Improving API Documentation for Java-like Languages","container-title":"Evaluation and Usability of Programming Languages and Tools","collection-title":"PLATEAU '10","publisher":"ACM","page":"3:1–3:1","source":"ACM Digital Library","abstract":"The Javadoc paradigm for displaying API documentation to users is quite popular, with similar variants existing for many mainstream languages. However, two user interface design properties of Javadoc may reduce its utility when displaying documentation for APIs that make use of inheritance and parametric polymorphism. First, Javadoc does not show a flattened view of all members of a class or interface, but rather only those defined directly in the type. Second, and as a consequence, any methods whose types contain type parameters of a superclass will always be shown in the context of the superclass. That is, if the method C.m returns type T, subclasses of C will always see this parent signature, even if they instantiate T to a concrete type such as Integer. We show that this situation arises often in some libraries, and present the results of a study that measures the usability consequences of these two Javadoc design decisions. Our results show that a user interface that shows instantiated type parameters for members is preferred over one that presents type parameters in the Javadoc style.","URL":"http://doi.acm.org/10.1145/1937117.1937120","DOI":"10.1145/1937117.1937120","ISBN":"978-1-4503-0547-1","author":[{"family":"Dubochet","given":"Gilles"},{"family":"Malayeri","given":"Donna"}],"issued":{"date-parts":[[2010]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Reno, Nevada"},
  {"id":"rolfImprovingManComputer1999","type":"paper-conference","title":"Improving a H&man- Computer Dialogue","source":"Semantic Scholar","abstract":"Any system designed for people to use should be easy to learn and remember, effective, and pleasant to use. Over the years there has been a considerable increase in designing interfaces that score highly on these issues. This experience has been documented in a number of guidelines for constructing good human-computer interfaces [5, lo]. Following these guidelines is commonly considered a necessary but insufficient condition for constructing good human-computer interfaces. Most often, following such guidelines during the design phase imposes little extra effort on a development project. Guideline reports, however, are often lengthy. Documents of more i.han 400 pages are not uncommon. The mere size of a guideline report often means that it is not consulted during design or design review simply because the work of locating relevant guidelines is not considered worth the effort. This article describes a survey that we undertook to investigate whether industrial data processing professionals would be able to recognize serious interface problems in simple but realistic dialogues. Seventyseven designers and programmers from industry and academia participated. Fifty-one were from industry, 10 were teachers or students from universities or high schools, and 16 had occupations that were not specified. Many of them were designers and programmers of administrative systems-the people who design, write, and maintain our daily programs. This article consists of four parts. We first present the survey and a number of conclusions from it. The second part of the article presents the exercise used in the survey-a dialogue that we asked the participants to evaluate as expressed in Appendix 1. The third part contains our annotated solution as shown in Appendix 2 and a suggestion for an improved design as characterized in Appendix 3.","author":[{"literal":"Rolf"},{"literal":"Molich"},{"literal":"Jakob"},{"literal":"Nielsén"}],"issued":{"date-parts":[[1999]]}},
  {"id":"myersHumanCenteredMethodsImproving2017","type":"paper-conference","title":"Human-Centered Methods for Improving API Usability","container-title":"2017 IEEE/ACM 1st International Workshop on API Usage and Evolution (WAPI)","page":"2-2","source":"IEEE Xplore","event":"2017 IEEE/ACM 1st International Workshop on API Usage and Evolution (WAPI)","abstract":"Application programming interfaces (APIs) are the way that developers reuse functionality supplied in libraries, software development kits (SDKs), toolkits, frameworks, etc. By adapting a variety of user-centered methods from human-computer interaction (HCI), we have studied usability problems both for API users and for API designers. These studies revealed barriers both at a low level (such as using the factory pattern in an API) and at a high level (such as the lack of example code in the documentation). In lab studies, we have shown that some patterns can slow programmers down by a factor of 10, and in the field, we have seen problematic APIs block programmers for up to a week while they waited for an answer from the API designer. The implications of our results can guide the design of the API, and, when APIs cannot be changed, inspire novel documentation and tools to help use the APIs. Our collaboration with SAP resulted in significant improvements to their APIs, documentation and tools. This talk will summarize results presented in our recent paper on Improving API Usability, along with our newly proposed work on studying the needs of API designers. I will also cover a wide variety of HCI methods we have found to be effective for better understanding and meeting the needs of API users of all levels: novice, professional, and end-user programmers (EUPs). We have applied these methods across all activities of API development: requirements and problem analysis, design, development, testing, and deployment. Since programming is a human process, we have found that many of these HCI methods can be used without change to answer many useful questions, but for other questions, we have needed to create new human-centered methods.","DOI":"10.1109/WAPI.2017.2","author":[{"family":"Myers","given":"B. A."}],"issued":{"date-parts":[[2017,5]]}},
  {"id":"mindermannHowUsableAre2018","type":"paper-conference","title":"How Usable Are Rust Cryptography APIs?","container-title":"2018 IEEE International Conference on Software Quality, Reliability and Security (QRS)","page":"143-154","source":"IEEE Xplore","event":"2018 IEEE International Conference on Software Quality, Reliability and Security (QRS)","abstract":"Context: Poor usability of cryptographic APIs is a severe source of vulnerabilities. Aim: We wanted to find out what kind of cryptographic libraries are present in Rust and how usable they are. Method: We explored Rust's cryptographic libraries through a systematic search, conducted an exploratory study on the major libraries and a controlled experiment on two of these libraries with 28 student participants. Results: Only half of the major libraries explicitly focus on usability and misuse resistance, which is reflected in their current APIs. We found that participants were more successful using rust-crypto which we considered less usable than ring before the experiment. Conclusion: We discuss API design insights and make recommendations for the design of crypto libraries in Rust regarding the detail and structure of the documentation, higher-level APIs as wrappers for the existing low-level libraries, and selected, good-quality example code to improve the emerging cryptographic libraries of Rust.","DOI":"10.1109/QRS.2018.00028","author":[{"family":"Mindermann","given":"K."},{"family":"Keck","given":"P."},{"family":"Wagner","given":"S."}],"issued":{"date-parts":[[2018,7]]}},
  {"id":"murphy-hillDiscoveringAPIUsability2018","type":"paper-conference","title":"Discovering API Usability Problems at Scale","container-title":"Proceedings of the 2Nd International Workshop on API Usage and Evolution","collection-title":"WAPI '18","publisher":"ACM","page":"14–17","source":"ACM Digital Library","abstract":"Software developers' productivity can be negatively impacted by using APIs incorrectly. In this paper, we describe an analysis technique we designed to find API usability problems by comparing successive file-level changes made by individual software developers. We applied our tool, StopMotion, to the file histories of real developers doing real tasks at Google. The results reveal several API usability challenges including simple typos, conceptual API misalignments, and conflation of similar APIs.","URL":"http://doi.acm.org/10.1145/3194793.3194795","DOI":"10.1145/3194793.3194795","ISBN":"978-1-4503-5754-8","author":[{"family":"Murphy-Hill","given":"Emerson"},{"family":"Sadowski","given":"Caitlin"},{"family":"Head","given":"Andrew"},{"family":"Daughtry","given":"John"},{"family":"Macvean","given":"Andrew"},{"family":"Jaspan","given":"Ciera"},{"family":"Winter","given":"Collin"}],"issued":{"date-parts":[[2018]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Gothenburg, Sweden"},
  {"id":"bhaskarDevelopingUsableAPIs2016","type":"paper-conference","title":"Developing usable APIs with XP and cognitive dimensions","container-title":"2016 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)","page":"101-105","source":"IEEE Xplore","event":"2016 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)","abstract":"Developing a usable Application Programming Interface (API) is a complex and expensive task. Two major factors play important roles on the usability of an API: the design and resources (e.g. documentation, tutorials). API Developers typically evaluate the usability of an API after implementation that results in refactoring tasks if an API lacks usability after development. This refactoring could be avoided if evaluation were continuously conducted while development. This paper explores a new combined process for building usable APIs that combines concepts from a usability evaluation method (Cognitive Dimensions Framework) and an Agile development methodology (eXtreme Programming). We explored the effectiveness of this combined process by implementing a web-based API and conducting a user study. The findings from our evaluation indicated that the new process helped in designing and building a usable API, but ignored some concerns related to resources.","DOI":"10.1109/VLHCC.2016.7739671","author":[{"family":"Bhaskar","given":"R. K."},{"family":"Anslow","given":"C."},{"family":"Brosz","given":"J."},{"family":"Maurer","given":"F."}],"issued":{"date-parts":[[2016,9]]}},
  {"id":"acarComparingUsabilityCryptographic2017","type":"paper-conference","title":"Comparing the Usability of Cryptographic APIs","container-title":"2017 IEEE Symposium on Security and Privacy (SP)","page":"154-171","source":"IEEE Xplore","event":"2017 IEEE Symposium on Security and Privacy (SP)","abstract":"Potentially dangerous cryptography errors are well-documented in many applications. Conventional wisdom suggests that many of these errors are caused by cryptographic Application Programming Interfaces (APIs) that are too complicated, have insecure defaults, or are poorly documented. To address this problem, researchers have created several cryptographic libraries that they claim are more usable, however, none of these libraries have been empirically evaluated for their ability to promote more secure development. This paper is the first to examine both how and why the design and resulting usability of different cryptographic libraries affects the security of code written with them, with the goal of understanding how to build effective future libraries. We conducted a controlled experiment in which 256 Python developers recruited from GitHub attempt common tasks involving symmetric and asymmetric cryptography using one of five different APIs. We examine their resulting code for functional correctness and security, and compare their results to their self-reported sentiment about their assigned library. Our results suggest that while APIs designed for simplicity can provide security benefits - reducing the decision space, as expected, prevents choice of insecure parameters - simplicity is not enough. Poor documentation, missing code examples, and a lack of auxiliary features such as secure key storage, caused even participants assigned to simplified libraries to struggle with both basic functional correctness and security. Surprisingly, the availability of comprehensive documentation and easy-to-use code examples seems to compensate for more complicated APIs in terms of functionally correct results and participant reactions, however, this did not extend to security results. We find it particularly concerning that for about 20% of functionally correct tasks, across libraries, participants believed their code was secure when it was not. Our results suggest that while new cryptographic libraries that want to promote effective security should offer a simple, convenient interface, this is not enough: they should also, and perhaps more importantly, ensure support for a broad range of common tasks and provide accessible documentation with secure, easy-to-use code examples.","DOI":"10.1109/SP.2017.52","author":[{"family":"Acar","given":"Y."},{"family":"Backes","given":"M."},{"family":"Fahl","given":"S."},{"family":"Garfinkel","given":"S."},{"family":"Kim","given":"D."},{"family":"Mazurek","given":"M. L."},{"family":"Stransky","given":"C."}],"issued":{"date-parts":[[2017,5]]}},
  {"id":"blackwellCognitiveDimensionsNotations2001","type":"chapter","title":"Cognitive Dimensions of Notations: Design Tools for Cognitive Technology","container-title":"Cognitive Technology: Instruments of Mind","publisher":"Springer Berlin Heidelberg","page":"325-341","volume":"2117","source":"DOI.org (Crossref)","abstract":"The Cognitive Dimensions of Notations framework has been created to assist the designers of notational systems and information artifacts to evaluate their designs with respect to the impact that they will have on the users of those designs. The framework emphasizes the design choices available to such designers, including characterization of the users activity, and the inevitable tradeoffs that will occur between potential design options. The resulting framework has been under development for over 10 years, and now has an active community of researchers devoted to it. This paper summarizes the current activity, especially the results of a one-day workshop devoted to Cognitive Dimensions in December 2000, and reviews the ways in which it applies to the field of Cognitive Technology.","URL":"http://link.springer.com/10.1007/3-540-44617-6_31","ISBN":"978-3-540-42406-2 978-3-540-44617-0","title-short":"Cognitive Dimensions of Notations","language":"en","editor":[{"family":"Beynon","given":"Meurig"},{"family":"Nehaniv","given":"Chrystopher L."},{"family":"Dautenhahn","given":"Kerstin"}],"author":[{"family":"Blackwell","given":"A. F."},{"family":"Britton","given":"C."},{"family":"Cox","given":"A."},{"family":"Green","given":"T. R. G."},{"family":"Gurr","given":"C."},{"family":"Kadoda","given":"G."},{"family":"Kutar","given":"M. S."},{"family":"Loomes","given":"M."},{"family":"Nehaniv","given":"C. L."},{"family":"Petre","given":"M."},{"family":"Roast","given":"C."},{"family":"Roe","given":"C."},{"family":"Wong","given":"A."},{"family":"Young","given":"R. M."}],"issued":{"date-parts":[[2001]]},"accessed":{"date-parts":[[2019,5,16]]},"publisher-place":"Berlin, Heidelberg","DOI":"10.1007/3-540-44617-6_31"},
  {"id":"mclellanBuildingMoreUsable1998","type":"article-journal","title":"Building more usable APIs","container-title":"IEEE Software","page":"78-86","volume":"15","issue":"3","source":"IEEE Xplore","abstract":"Traditional software usability methods can help us design more understandable and more useful application program interfaces (APIs). They also give us information we need to write good API reference documentation-before we invest in either programmers or writers and before evolving a large body of code or content.","DOI":"10.1109/52.676963","ISSN":"0740-7459","author":[{"family":"McLellan","given":"S. G."},{"family":"Roesler","given":"A. W."},{"family":"Tempest","given":"J. T."},{"family":"Spinuzzi","given":"C. I."}],"issued":{"date-parts":[[1998,5]]}},
  {"id":"clarkeBuildUserExperience","type":"book","title":"build the user experience for developers using Visual Studio,.Net and the WinFX Application Programming Interfaces (APIs).","source":"CiteSeer","abstract":"The relevance and utility of the Cognitive Dimensions framework [1] was proven early on in the development of the first release of the.Net APIs. We ran a usability study to determine if users would be able to use.Net to accomplish a set of tasks. The results of the study indicated that many users would face significant difficulties when working on these tasks. Clearly there was some work that needed to be done to improve the user experience around the APIs but it wasn’t immediately clear exactly what that work was. Many of the observations that were made during the usability study were of participants struggling with the API documentation. Participants spent a lot of time looking for classes that would show them how to accomplish the task. While searching through the documentation many participants stumbled upon the documentation for the classes that they ought to use. However, even after stumbling upon these classes, all participants continued to search for something else. The immediate reaction of the team responsible for implementing the API was that the documentation needed to be fixed. The necessary classes needed to be sufficiently documented such that the connection with the task would be made clearer to users. However, the user experience team believed that the issues participants faced in the lab were deeper than simply being unable to find the appropriate documentation. In an attempt to get at the underlying cause of the problem, we used the Cognitive Dimensions framework to describe each usability issue in terms of specific dimensions. Doing so made it clear to us that","author":[{"family":"Clarke","given":"Steven"}]},
  {"id":"sohanAutomatedExampleOriented2017","type":"paper-conference","title":"Automated example oriented REST API documentation at Cisco","container-title":"2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering in Practice Track (ICSE-SEIP)","page":"213-222","source":"IEEE Xplore","event":"2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering in Practice Track (ICSE-SEIP)","abstract":"Generating and maintaining an up-to-date API documentation is a challenging problem for evolving REST APIs. At Cisco, we've used SpyREST, an automated REST API documentation tool, via our functional tests to solve this problem with one of our APIs for a cyber security application over the past eighteen months. Using this approach, we've avoided the need for extensive manual effort by leveraging our test code to also generate a continuously updated API documentation as the API evolved. Our always-updated API documentation has helped creating a fast feedback loop between the developers and QA engineers. The findings from this paper can be used by practitioners to introduce automation to reduce the manual effort associated to their REST API documentation process.","DOI":"10.1109/ICSE-SEIP.2017.11","author":[{"family":"Sohan","given":"S. M."},{"family":"Anslow","given":"C."},{"family":"Maurer","given":"F."}],"issued":{"date-parts":[[2017,5]]}},
  {"id":"watsonApplyingCognitiveDimensions2014","type":"paper-conference","title":"Applying the Cognitive Dimensions of API Usability to Improve API Documentation Planning","container-title":"Proceedings of the 32Nd ACM International Conference on The Design of Communication CD-ROM","collection-title":"SIGDOC '14","publisher":"ACM","page":"24:1–24:2","source":"ACM Digital Library","abstract":"This interactive poster explores the application of the 12 cognitive dimensions of API usability to API documentation planning by using the dimensions to identify and characterize the factors that influence the documentation that the users of an API require. Many factors can complicate estimating and planning the documentation an API requires. Even when an API's documentation requirements can be estimated, it can be difficult to present to stakeholders an objective basis for the estimate. The cognitive dimensions of API usability have characterized APIs and their users successfully and they have been used to communicate these characterizations to stakeholders. It follows that the same dimensions could also help identify the documentation that an API requires to provide a satisfactory and successful experience for the software developers who use the API.","URL":"http://doi.acm.org/10.1145/2666216.2666239","DOI":"10.1145/2666216.2666239","ISBN":"978-1-4503-3183-8","author":[{"family":"Watson","given":"Robert"}],"issued":{"date-parts":[[2014]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Colorado Springs, CO, USA"},
  {"id":"farooqAPIPeerReviews2010","type":"paper-conference","title":"API Peer Reviews: A Method for Evaluating Usability of Application Programming Interfaces","container-title":"Proceedings of the 2010 ACM Conference on Computer Supported Cooperative Work","collection-title":"CSCW '10","publisher":"ACM","page":"207–210","source":"ACM Digital Library","abstract":"API usability tests in the lab are time and resource intensive, thus allowing a relatively small percentage of the API namespace to be evaluated. We describe a group-based usability inspection method -- API Peer Reviews -- to evaluate API usability. Based on an analysis of usability breakdowns from API Peer Reviews and API usability tests, results show that API Peer Reviews identified breakdowns across several cognitive dimensions, some of which were different than what was identified by API usability tests. We reflect on the adoption of API Peer Reviews as a collaborative practice in organizations for evaluating API usability.","URL":"http://doi.acm.org/10.1145/1718918.1718957","DOI":"10.1145/1718918.1718957","ISBN":"978-1-60558-795-0","title-short":"API Peer Reviews","author":[{"family":"Farooq","given":"Umer"},{"family":"Zirkler","given":"Dieter"}],"issued":{"date-parts":[[2010]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Savannah, Georgia, USA"},
  {"id":"murphyAPIDesignersField2018","type":"paper-conference","title":"API Designers in the Field: Design Practices and Challenges for Creating Usable APIs","container-title":"2018 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)","page":"249-258","source":"IEEE Xplore","event":"2018 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)","abstract":"Application Programming Interfaces (APIs) are a rapidly growing industry and the usability of the APIs is crucial to programmer productivity. Although prior research has shown that APIs commonly suffer from significant usability problems, little attention has been given to studying how APIs are designed and created in the first place. We interviewed 24 professionals involved with API design from 7 major companies to identify their training and design processes. Interviewees had insights into many different aspects of designing for API usability and areas of significant struggle. For example, they learned to do API design on the job, and had little training for it in school. During the design phase they found it challenging to discern which potential use cases of the API users will value most. After an API is released, designers lack tools to gather aggregate feedback from this data even as developers openly discuss the API online.","DOI":"10.1109/VLHCC.2018.8506523","title-short":"API Designers in the Field","author":[{"family":"Murphy","given":"L."},{"family":"Kery","given":"M. B."},{"family":"Alliyu","given":"O."},{"family":"Macvean","given":"A."},{"family":"Myers","given":"B. A."}],"issued":{"date-parts":[[2018,10]]}},
  {"id":"tamimiAnalysisUAEOpen2017","type":"paper-conference","title":"Analysis of UAE open government data usability within mobile application development","container-title":"2017 IEEE 2nd International Conference on Big Data Analysis (ICBDA)(","page":"437-441","source":"IEEE Xplore","event":"2017 IEEE 2nd International Conference on Big Data Analysis (ICBDA)(","abstract":"For a number of years, the civil society has been pressing governments to produce machine-readable presentations of the collected data. One of the ultimate Open Government Data (OGD) goals is to aid developers develop mobile applications that can improve citizen's live and also enhance the country's economy and support smart cities endeavors. Mobile applications form a powerful channel to serve and reach businesses and citizens. The aim of this study was to determine the status of the UAE OGD usability within the mobile application development by reviewing the usability factors to develop mobile application and assess the OGD datasets. An assessment instrument was designed based on the reviewed usability factors, to assess the UAE OGD datasets. From this study it was clear that the major factors in mobile application development usability by OGD are data completeness, data format and support for developers by offering Application Programming Interface (API) and guides, majority of datasets were found to be complete an indication that UAE OGD has a strong point in data completeness. However, the current UAE OGD does not encourage the developers to build mobile applications because of lack of data format support and missing of API and guides. Guidelines to improve the current UAE OGD have been proposed based on the results of this research.","DOI":"10.1109/ICBDA.2017.8078857","author":[{"family":"Tamimi","given":"H."},{"family":"Hoshang","given":"S. A."},{"family":"Blooshi","given":"E. J. A."}],"issued":{"date-parts":[[2017,3]]}},
  {"id":"kwonExperienceReportAPI2018","type":"paper-conference","title":"An Experience Report of the API Evolution and Maintenance for Software Platforms","container-title":"2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)","page":"587-590","source":"IEEE Xplore","event":"2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)","abstract":"Development and maintenance of software plat-form APIs are challenging because new APIs are constantly added in new software platforms. Furthermore, software plat-form API development requires a lot of stakeholders to work together on tight release schedules. Application developers use platform's APIs to create their applications and therefore providing a well-defined and comprehensive set of platform APIs may be the most basic requirement for software platforms. To provide such APIs, API usability should be secured and API backward compatibility should be guaranteed in subsequent platform re-leases. In these circumstances, sharing lessons learned from multiple years of experience of platform API development, mainte-nance, and releases using an integrated API development process can benefit API researchers and practitioners who have similar needs to create or adopt API development process for their projects. In this paper we share an API development and mainte-nance process for multi-device Tizen software platform, which we call the Tizen API Change Request (ACR) process. The process has been used among various Tizen API stakeholders for several years of Tizen platform and SDK releases to keep API usability and compatibility high. We believe the process can be further applied to various software platforms and projects to systematically develop and maintain their APIs.","DOI":"10.1109/ICSME.2018.00034","author":[{"family":"Kwon","given":"H."},{"family":"Ahn","given":"J."},{"family":"Choi","given":"S."},{"family":"Siewierski","given":"J."},{"family":"Kosko","given":"P."},{"family":"Szydelko","given":"P."}],"issued":{"date-parts":[[2018,9]]}},
  {"id":"wijayarathnaEmpiricalUsabilityAnalysis2019","type":"paper-conference","title":"An Empirical Usability Analysis of the Google Authentication API","container-title":"Proceedings of the Evaluation and Assessment on Software Engineering","collection-title":"EASE '19","publisher":"ACM","page":"268–274","source":"ACM Digital Library","abstract":"Millions of web users today use their Google accounts to sign into millions of relying party websites. This is enabled through the Google authentication API, which allows third party application developers to embed Google sign-in into their application. However, regardless to the strength of the Google authentication mechanism, the majority of these applications have been identified to be infected with broken authentication, which made them vulnerable to cyber attacks. A major reason for this is mistakes that developers make while embedding Google sign-in into their application. High complexity and lack of usability of the Google authentication API makes it difficult for programmers to use it correctly and lead them to make mistakes while using the API. In this study, we evaluated the usability of the Google authentication API by conducting a user study with 10 programmers, where they attempted to embed Google sign-in and sign-out into a web application via Google authentication API. We employed think-aloud approach to evaluate the experience of the programmers and they also provided their feedback by answering the cognitive dimension framework based questionnaire. Results of the experiment revealed 12 usability issues that exist in the Google authentication API. We discussed how these usability issues would affect the security of the application that are developed using the Google authentication API and how the API should be improved to provide a better experience to application developers.","URL":"http://doi.acm.org/10.1145/3319008.3319350","DOI":"10.1145/3319008.3319350","ISBN":"978-1-4503-7145-2","author":[{"family":"Wijayarathna","given":"Chamila"},{"family":"Arachchilage","given":"Nalin A. G."}],"issued":{"date-parts":[[2019]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Copenhagen, Denmark"},
  {"id":"piccioniEmpiricalStudyAPI2013","type":"paper-conference","title":"An Empirical Study of API Usability","container-title":"2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement","page":"5-14","source":"IEEE Xplore","event":"2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement","abstract":"Modern software development extensively involves reusing library components accessed through their Application Programming Interfaces (APIs). Usability is therefore a fundamental goal of API design, but rigorous empirical studies of API usability are still relatively uncommon. In this paper, we present the design of an API usability study which combines interview questions based on the cognitive dimensions framework, with systematic observations of programmer behavior while solving programming tasks based on “tokens”. We also discuss the implementation of the study to assess the usability of a persistence library API (offering functionalities such as storing objects into relational databases). The study involved 25 programmers (including students, researchers, and professionals), and provided additional evidence to some critical features evidenced by related studies, such as the difficulty of finding good names for API features and of discovering relations between API types. It also discovered new issues relevant to API design, such as the impact of flexibility, and confirmed the crucial importance of accurate documentation for usability.","DOI":"10.1109/ESEM.2013.14","author":[{"family":"Piccioni","given":"M."},{"family":"Furia","given":"C. A."},{"family":"Meyer","given":"B."}],"issued":{"date-parts":[[2013,10]]}},
  {"id":"leeAPIDesignProcess2014","type":"paper-conference","title":"An API Design Process in Terms of Usability: A Case Study on Building More Usable APIs for Smart TV Platform","container-title":"2014 IEEE 38th International Computer Software and Applications Conference Workshops","page":"567-571","source":"IEEE Xplore","event":"2014 IEEE 38th International Computer Software and Applications Conference Workshops","abstract":"Products are released based on various platforms. An Application programing interface (API) is important to develop platform based applications effectively. Previously, we had some difficulties in developing applications using our platform APIs. Their name was ambiguous, and their functions were not primitive, and even their documentation was not enough to refer to. Therefore, we had to maintain our platform APIs. In this paper, we propose an API design process and API evaluation guidelines. \"API Analysts\" elicit functions from requirement documents. \"API designer\" design APIs for the functions following the guidelines. \"Technical writers\" produce documentation for the APIs. \"API reviewers\" evaluate the APIs and API documentation conforming to the proposed guidelines. Proposed process made our platform APIs more convenient to use for developing applications.","DOI":"10.1109/COMPSACW.2014.95","title-short":"An API Design Process in Terms of Usability","author":[{"family":"Lee","given":"S."},{"family":"Lee","given":"S."},{"family":"Lim","given":"S."},{"family":"Jung","given":"J."},{"family":"Choi","given":"S."},{"family":"Kim","given":"N."},{"family":"Lee","given":"J."}],"issued":{"date-parts":[[2014,7]]}},
  {"id":"kwonFeldStudyImproving2018","type":"paper-conference","title":"A Feld Study on Improving the API Usability of Software Platforms for Consumer Electronics Devices","container-title":"2018 IEEE International Conference on Consumer Electronics - Asia (ICCE-Asia)","page":"206-212","source":"IEEE Xplore","event":"2018 IEEE International Conference on Consumer Electronics - Asia (ICCE-Asia)","abstract":"Providing highly usable APIs is considered to be a foundation of any software platform since an API is a basic unit which is used by software developers to develop on a platform. Furthermore, it is even more critical that a software platform aims to build an application ecosystem. There have been researches on API usability such as how to design a good API how to improve API usability, how to measure API usability, etc. However, there has been no empirical field study of how to improve the usability of API for a software platform which aims to build an application ecosystem especially for CE devices. The software platform we have worked on is the open source Tizen platform. Tizen platform was introduced in 2012 and has been adapted to CE devices such as smartphones, TVs, wearable devices, refrigerators, etc. We present lessons learned from multiple public releases of Tizen platform APIs and SDKs to improve Tizen API usability consequently to improve the usability of the application development environment noticeably by introducing Tizen. NET.","DOI":"10.1109/ICCE-ASIA.2018.8552127","author":[{"family":"Kwon","given":"H."},{"family":"Choi","given":"W."}],"issued":{"date-parts":[[2018,6]]}},
  {"id":"stylosCaseStudyAPI2008","type":"paper-conference","title":"A case study of API redesign for improved usability","container-title":"2008 IEEE Symposium on Visual Languages and Human-Centric Computing","page":"189-192","source":"IEEE Xplore","event":"2008 IEEE Symposium on Visual Languages and Human-Centric Computing","abstract":"As software grows more complex, software developers' productivity is increasingly defined by their ability to effectively reuse code. Even APIs (application programming interfaces) and other code explicitly intended for reuse are often difficult and time consuming for developers to use. This paper describes the user-centered design and evaluation process we evolved in redesigning SAP's BRFplus - a business rules engine, whose API was created for platform development, but which is now also increasingly being used by application developers - even though it was not initially designed with their specific needs in mind. Our API redesign attempts to take both the initial as well as the new emergent user requirements into account. A usability evaluation of our proposed changes to the API suggests that our user-centered design process was successful in helping to create an API that significantly improved users' productivity and better matches the different users' needs.","DOI":"10.1109/VLHCC.2008.4639083","author":[{"family":"Stylos","given":"J."},{"family":"Graf","given":"B."},{"family":"Busse","given":"D. K."},{"family":"Ziegler","given":"C."},{"family":"Ehret","given":"R."},{"family":"Karstens","given":"J."}],"issued":{"date-parts":[[2008,9]]}},
  {"id":"daughtryAPIUsabilityCHI2009","type":"paper-conference","title":"API Usability: CHI'2009 Special Interest Group Meeting","container-title":"CHI '09 Extended Abstracts on Human Factors in Computing Systems","collection-title":"CHI EA '09","publisher":"ACM","page":"2771–2774","source":"ACM Digital Library","abstract":"Programmers of all types from novice end-user developers to professional software engineers make use of application programming interfaces (API) within their various designs. And, while the use of these interfaces is ubiquitous, there is little research about their design. Recently, a number of researchers and practitioners have begun to treat API design as a first-order object of study and practice. The purpose of this special interest group meeting is to bring together the community of usability researchers and professionals interested in API usability. The time will be used to discuss attendees' ideas and opinions in order to stimulate this new and exciting emerging field that crosses the boundaries between human-computer interaction and software engineering.","URL":"http://doi.acm.org/10.1145/1520340.1520403","DOI":"10.1145/1520340.1520403","ISBN":"978-1-60558-247-4","title-short":"API Usability","author":[{"family":"Daughtry","given":"John M."},{"family":"Farooq","given":"Umer"},{"family":"Stylos","given":"Jeffrey"},{"family":"Myers","given":"Brad A."}],"issued":{"date-parts":[[2009]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Boston, MA, USA"},
  {"id":"farooqAPIUsabilityPeer2010","type":"paper-conference","title":"API Usability Peer Reviews: A Method for Evaluating the Usability of Application Programming Interfaces","container-title":"Proceedings of the SIGCHI Conference on Human Factors in Computing Systems","collection-title":"CHI '10","publisher":"ACM","page":"2327–2336","source":"ACM Digital Library","abstract":"We describe a usability inspection method to evaluate Application Programming Interfaces (APIs). We found the method useful as it identified usability defects in Microsoft's .NET Framework, of which 59% were new and 21% were fixed. Based on a comparison of usability defects identified between API usability peer reviews and API usability tests, API usability tests were found to expose design issues related to actually using an API whereas API usability peer reviews were found to expose the design rationale of an API. We reflect on the efficiency and productivity of each method: each API usability test is equivalent to 16 API usability peer reviews with the former having a 2.5x productivity advantage. We discuss how API usability peer reviews can be used in conjunction with API usability tests to increase usability coverage on APIs.","URL":"http://doi.acm.org/10.1145/1753326.1753677","DOI":"10.1145/1753326.1753677","ISBN":"978-1-60558-929-9","title-short":"API Usability Peer Reviews","author":[{"family":"Farooq","given":"Umer"},{"family":"Welicki","given":"Leon"},{"family":"Zirkler","given":"Dieter"}],"issued":{"date-parts":[[2010]]},"accessed":{"date-parts":[[2019,5,8]]},"publisher-place":"New York, NY, USA","event-place":"Atlanta, Georgia, USA"},
  {"id":"macveanAPIDesignReviews2016","type":"paper-conference","title":"API Design Reviews at Scale","container-title":"Proceedings of the 2016 CHI Conference Extended Abstracts on Human Factors in Computing Systems - CHI EA '16","publisher":"ACM Press","page":"849-858","source":"DOI.org (Crossref)","event":"the 2016 CHI Conference Extended Abstracts","abstract":"The number of APIs produced by Google’s various business units grew at an astounding rate over the last decade, the result of which was a user experience containing wild inconsistencies and usability problems. There was no single issue that dominated the usability problems; rather, users suffered a death from a thousand papercuts. A lightweight, scalable, distributed design review process was put into place that has improved our APIs and the efﬁcacy of our many API designers. Challenges remain, but the API design reviews at scale program has started successfully.","URL":"http://dl.acm.org/citation.cfm?doid=2851581.2851602","DOI":"10.1145/2851581.2851602","ISBN":"978-1-4503-4082-3","language":"en","author":[{"family":"Macvean","given":"Andrew"},{"family":"Maly","given":"Martin"},{"family":"Daughtry","given":"John"}],"issued":{"date-parts":[[2016]]},"accessed":{"date-parts":[[2019,5,8]]},"publisher-place":"Santa Clara, California, USA"},
  {"id":"uddinAnalyzingTemporalAPI2011","type":"paper-conference","title":"Analyzing temporal API usage patterns","container-title":"2011 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011)","page":"456-459","source":"IEEE Xplore","event":"2011 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011)","abstract":"Software reuse through Application Programming Interfaces (APIs) is an integral part of software development. As developers write client programs, their understanding and usage of APIs change over time. Can we learn from long-term changes in how developers work with APIs in the lifetime of a client program? We propose Temporal API Usage Mining to detect significant changes in API usage. We describe a framework to extract detailed models representing addition and removal of calls to API methods over the change history of a client program. We apply machine learning technique to these models to semi-automatically infer temporal API usage patterns, i.e., coherent addition of API calls at different phases in the life-cycle of the client program.","DOI":"10.1109/ASE.2011.6100098","author":[{"family":"Uddin","given":"G."},{"family":"Dagenais","given":"B."},{"family":"Robillard","given":"M. P."}],"issued":{"date-parts":[[2011,11]]}},
  {"id":"wangExploratoryStudyAPI2012","type":"paper-conference","title":"An Exploratory Study of API Usage Examples on the Web","container-title":"2012 19th Asia-Pacific Software Engineering Conference","page":"396-405","volume":"1","source":"IEEE Xplore","event":"2012 19th Asia-Pacific Software Engineering Conference","abstract":"Usage examples are helpful for programmers learning to use APIs from third-party frameworks or libraries. There are lots of usage examples scattered in web pages on the Web, such as tutorials, blogs, and forums. A few researches have proposed approaches to leveraging these usage examples to improve programming. However, due to the lack of comprehensive understanding on the current situation of usage examples on the web, the work is still at the very beginning. Many concerns are reserved, for instance, how many usage examples can be found on the Web? how well do such examples support programmers on earth? what factors have impact on these examples' usability? In this paper, we conducted an exploratory study of usage examples on the web, including their distribution, characteristics like content style, correctness, and complexity, as well as their correlations. Through the study, we obtain some insight of how to facilitate utilization of usage examples on the web and what mechanisms could be provided. Possible research directions and problems are proposed at the end.","DOI":"10.1109/APSEC.2012.122","author":[{"family":"Wang","given":"L."},{"family":"Zou","given":"Y."},{"family":"Fang","given":"L."},{"family":"Xie","given":"B."},{"family":"Yang","given":"F."}],"issued":{"date-parts":[[2012,12]]}},
  {"id":"marenkovToolDesignTimeUsability2017","type":"paper-conference","title":"A Tool for Design-Time Usability Evaluation of Web User Interfaces","container-title":"Advances in Databases and Information Systems","collection-title":"Lecture Notes in Computer Science","publisher":"Springer International Publishing","page":"394-407","source":"Springer Link","abstract":"The diversity of smartphones and tablet computers has become intrinsic part of modern life. Following usability guidelines while designing web user interface (UI) is an essential requirement for each web application. Even a minor change in UI could lead to usability problems, e.g. changing background or foreground colour of buttons could cause usability problems especially for people with disabilities. Empirical evaluation methods such as questionnaires and Card Sorting are effective in finding such problems. Nevertheless, these methods cannot be used widely when time, money and evaluators are scarce. The purpose of our work is to deliver a tool for design-time automatic evaluation of UI conformance to category-specific usability guidelines. The main contribution of this solution is enabling immediate cost-efficient and automatic web UI evaluation that conforms to available and set standards. This approach is being integrated into the Estonian eGovernment authority in order to automate usability evaluation of web applications.","ISBN":"978-3-319-66917-5","language":"en","author":[{"family":"Marenkov","given":"Jevgeni"},{"family":"Robal","given":"Tarmo"},{"family":"Kalja","given":"Ahto"}],"editor":[{"family":"Kirikova","given":"Mārīte"},{"family":"Nørvåg","given":"Kjetil"},{"family":"Papadopoulos","given":"George A."}],"issued":{"date-parts":[[2017]]}},
  {"id":"raufSystematicMappingStudy2019","type":"article-journal","title":"A systematic mapping study of API usability evaluation methods","container-title":"Computer Science Review","page":"49-68","volume":"33","source":"ScienceDirect","abstract":"An Application Programming Interface (API) provides a programmatic interface to a software component that is often offered publicly and may be used by programmers who are not the API’s original designers. APIs play a key role in software reuse. By reusing high quality components and services, developers can increase their productivity and avoid costly defects. The usability of an API is a qualitative characteristic that evaluates how easy it is to use an API. Recent years have seen a considerable increase in research efforts aiming at evaluating the usability of APIs. An API usability evaluation can identify problem areas and provide recommendations for improving the API. In this systematic mapping study, we focus on 47 primary studies to identify the aim and the method of the API usability studies. We investigate which API usability factors are evaluated, at which phases of API development is the usability of API evaluated and what are the current limitations and open issues in API usability evaluation. We believe that the results of this literature review would be useful for both researchers and industry practitioners interested in investigating the usability of API and new API usability evaluation methods.","URL":"http://www.sciencedirect.com/science/article/pii/S1574013718301515","DOI":"10.1016/j.cosrev.2019.05.001","ISSN":"1574-0137","author":[{"family":"Rauf","given":"Irum"},{"family":"Troubitsyna","given":"Elena"},{"family":"Porres","given":"Ivan"}],"issued":{"date-parts":[[2019,8,1]]},"accessed":{"date-parts":[[2019,5,23]]},"container-title-short":"Computer Science Review"},
  {"id":"mosqueira-reySystematicApproachAPI2018","type":"article-journal","title":"A systematic approach to API usability: Taxonomy-derived criteria and a case study","container-title":"Information and Software Technology","page":"46-63","volume":"97","source":"ScienceDirect","abstract":"Context\nThe currently existing literature about Application Program Interface (API) usability is heterogeneous in terms of goals, scope, and audience; and its connection to accepted definitions of usability is rarely made explicit. The use of metrics to measure API usability is focused only on measurable characteristics excluding those usability aspects that are related to the subjectivity of human opinions.\nObjective\nOur objective is to build a comprehensive set of heuristics and guidelines for API usability that is a structured synthesis of the existing literature on API usability but which also covers other aspects that have been neglected so far. This set is explicitly connected with a usability model, something that allows us to check if we are addressing actual usability problems.\nMethod\nOur approach is to follow a systematic approach based on a comprehensive model of usability and context-of-use. From this comprehensive model we derived the set of heuristics and guidelines that are used to carry out a heuristic evaluation with usability experts and a subjective analysis with users. The influence of the context of use, something that is normally ignored, is explicitly analyzed.\nResults\nOur heuristics and guidelines were integrated into a usability study of a sleep medicine API. In this study, we were able to identify several usability issues of the proposed API that are not explicitly addressed in the existing literature. The context of use helped us to identify those categories that were more relevant to consider in order to improve API usability.\nConclusion\nThe literature on API usability is very technically-minded and tends to neglect the subjective component of usability. We contribute to a more global and comprehensive view of the usability of APIs that is not contradictory but complementary with metrics. Our criteria ease the always necessary usability evaluation with human evaluators and users.","URL":"http://www.sciencedirect.com/science/article/pii/S0950584917302471","DOI":"10.1016/j.infsof.2017.12.010","ISSN":"0950-5849","title-short":"A systematic approach to API usability","author":[{"family":"Mosqueira-Rey","given":"Eduardo"},{"family":"Alonso-Ríos","given":"David"},{"family":"Moret-Bonillo","given":"Vicente"},{"family":"Fernández-Varela","given":"Isaac"},{"family":"Álvarez-Estévez","given":"Diego"}],"issued":{"date-parts":[[2018,5,1]]},"accessed":{"date-parts":[[2019,5,23]]},"container-title-short":"Information and Software Technology"},
  {"id":"mosqueira-reyHeuristicEvaluationUser2018","type":"paper-conference","title":"A Heuristic Evaluation of the User and Programming Interfaces of a Sleep Medicine Application","container-title":"Proceedings of the 33rd Annual ACM Symposium on Applied Computing","collection-title":"SAC '18","publisher":"ACM","page":"648–655","source":"ACM Digital Library","abstract":"In many cases, the development of computer systems to help clinicians make decisions does not take into account fundamental aspects for the integration of these systems into routine clinical practice, such as aspects related to usability. In our case, the system under consideration is MIASoft, a comprehensive medical decision-support system for the diagnosis of Sleep Apnea-Hypopnea Syndrome (SAHS). Our objective is to perform a heuristic evaluation of this tool following a systematic and generalizable approach based on using comprehensive taxonomies of usability and context-of-use attributes as a source for the heuristics. We focus our analysis on two possible interfaces: (1) the graphical user interface, in which users interact directly with the tool and (2) the programming interface, in which programmers interact with the Application Program Interface (API) of MIASoft. Although both approaches are quite different, the same methodology was used for their heuristic evaluation. This demonstrates that we can retain the usefulness, ease of use, and generalizability of heuristic evaluation while adding depth and structure since we are basing our study on a comprehensive usability model.","URL":"http://doi.acm.org/10.1145/3167132.3167204","DOI":"10.1145/3167132.3167204","ISBN":"978-1-4503-5191-1","author":[{"family":"Mosqueira-Rey","given":"Eduardo"},{"family":"Alonso-Ríos","given":"David"},{"family":"Moret-Bonillo","given":"Vicente"}],"issued":{"date-parts":[[2018]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"New York, NY, USA","event-place":"Pau, France"},
  {"id":"wijayarathnaGenericCognitiveDimensions2017","type":"paper-conference","title":"A Generic Cognitive Dimensions Questionnaire to Evaluate the Usability of Security APIs","container-title":"Human Aspects of Information Security, Privacy and Trust","collection-title":"Lecture Notes in Computer Science","publisher":"Springer International Publishing","page":"160-173","source":"Springer Link","abstract":"Programmers use security APIs to embed security into the applications they develop. Security vulnerabilities get introduced into those applications, due to the usability issues that exist in the security APIs. Improving usability of security APIs would contribute to improve the security of applications that programmers develop. However, currently there is no methodology to evaluate the usability of security APIs. In this study, we attempt to improve the Cognitive Dimensions framework based API usability evaluation methodology, to evaluate the usability of security APIs.","ISBN":"978-3-319-58460-7","language":"en","author":[{"family":"Wijayarathna","given":"Chamila"},{"family":"Arachchilage","given":"Nalin A. G."},{"family":"Slay","given":"Jill"}],"editor":[{"family":"Tryfonas","given":"Theo"}],"issued":{"date-parts":[[2017]]}},
  {"id":"munirFrameworkExtendingUsability2012","type":"paper-conference","title":"A framework for extending usability engineering: API usability essentials: Extending usability via component-based platform","container-title":"2012 IEEE Conference on Open Systems","page":"1-6","source":"IEEE Xplore","event":"2012 IEEE Conference on Open Systems","abstract":"Application Programming Interface (API) in software development acts as an important milestone for software productions. It is believed that API usability impacts upon ease-in-use, operationability and acceptability among its audience. Likewise, an ever increasing need for extending and integrating Usability Engineering (UE) has become vital for the success of software products. Earlier researches within this domain do not address API's usability via a component-based framework approach. The proposed framework emphasizes on consolidated formulation of various usability and quality models to derive chunks of dimensional variables. Further the paper highlights API usability practices and heuristics applied in API development process and discusses API product's artifacts component to be used in deriving further product-related components to support enhancing usability.","DOI":"10.1109/ICOS.2012.6417654","title-short":"A framework for extending usability engineering","author":[{"family":"Munir","given":"M. B."},{"family":"Mushtaq","given":"A."}],"issued":{"date-parts":[[2012,10]]}},
  {"id":"robillardFieldStudyAPI2011","type":"article-journal","title":"A field study of API learning obstacles","container-title":"Empirical Software Engineering","page":"703-732","volume":"16","issue":"6","source":"Springer Link","abstract":"Large APIs can be hard to learn, and this can lead to decreased programmer productivity. But what makes APIs hard to learn? We conducted a mixed approach, multi-phased study of the obstacles faced by Microsoft developers learning a wide variety of new APIs. The study involved a combination of surveys and in-person interviews, and collected the opinions and experiences of over 440 professional developers. We found that some of the most severe obstacles faced by developers learning new APIs pertained to the documentation and other learning resources. We report on the obstacles developers face when learning new APIs, with a special focus on obstacles related to API documentation. Our qualitative analysis elicited five important factors to consider when designing API documentation: documentation of intent; code examples; matching APIs with scenarios; penetrability of the API; and format and presentation. We analyzed how these factors can be interpreted to prioritize API documentation development efforts","URL":"https://doi.org/10.1007/s10664-010-9150-8","DOI":"10.1007/s10664-010-9150-8","ISSN":"1573-7616","language":"en","author":[{"family":"Robillard","given":"Martin P."},{"family":"DeLine","given":"Robert"}],"issued":{"date-parts":[[2011,12,1]]},"accessed":{"date-parts":[[2019,5,23]]},"container-title-short":"Empir Software Eng"},
  {"id":"faulringCaseStudyUsing2012","type":"paper-conference","title":"A Case Study of Using HCI Methods to Improve Tools for Programmers","container-title":"Proceedings of the 5th International Workshop on Co-operative and Human Aspects of Software Engineering","collection-title":"CHASE '12","publisher":"IEEE Press","page":"37–39","source":"ACM Digital Library","abstract":"For more than five years, researchers at Carnegie Mellon University have been collaborating with several SAP teams to improve the usability of SAP's developer tools and programming APIs. Much research has shown that HCI techniques can improve the tools that developers use to write software. In a recent project, we applied HCI techniques to a SAP developer tool for the SAP NetWeaver Gateway product. The SAP team building this tool uses agile software development processes, which allowed them to quickly improve the tool's usability based upon the evaluations.","URL":"http://dl.acm.org/citation.cfm?id=2663638.2663647","ISBN":"978-1-4673-1824-2","author":[{"family":"Faulring","given":"Andrew"},{"family":"Myers","given":"Brad A."},{"family":"Oren","given":"Yaad"},{"family":"Rotenberg","given":"Keren"}],"issued":{"date-parts":[[2012]]},"accessed":{"date-parts":[[2019,5,23]]},"publisher-place":"Piscataway, NJ, USA","event-place":"Zurich, Switzerland"}
]
